
EEA_M_V3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007748  08007748  00008748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  00009094  2**0
                  CONTENTS
  4 .ARM          00000008  080077ec  080077ec  000087ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f4  080077f4  00009094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077f8  080077f8  000087f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  080077fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000094  08007890  00009094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007890  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014afa  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca8  00000000  00000000  0001dbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00021868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb1  00000000  00000000  00022960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268a9  00000000  00000000  00023611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b8e  00000000  00000000  00049eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e162d  00000000  00000000  00061a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  001430b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00147b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007730 	.word	0x08007730

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08007730 	.word	0x08007730

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
 8000584:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000586:	4b29      	ldr	r3, [pc, #164]	@ (800062c <MX_ADC1_Init+0xbc>)
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <MX_ADC1_Init+0xc0>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <MX_ADC1_Init+0xbc>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b26      	ldr	r3, [pc, #152]	@ (800062c <MX_ADC1_Init+0xbc>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b24      	ldr	r3, [pc, #144]	@ (800062c <MX_ADC1_Init+0xbc>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059e:	4b23      	ldr	r3, [pc, #140]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d0:	4b16      	ldr	r3, [pc, #88]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e6:	4811      	ldr	r0, [pc, #68]	@ (800062c <MX_ADC1_Init+0xbc>)
 80005e8:	f000 fe78 	bl	80012dc <HAL_ADC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005f2:	f000 f9f1 	bl	80009d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC1_Init+0xc4>)
 80005f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <MX_ADC1_Init+0xbc>)
 8000614:	f001 f8a8 	bl	8001768 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800061e:	f000 f9db 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000b0 	.word	0x200000b0
 8000630:	50040000 	.word	0x50040000
 8000634:	3ef08000 	.word	0x3ef08000

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a4      	sub	sp, #144	@ 0x90
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2268      	movs	r2, #104	@ 0x68
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f006 fa42 	bl	8006ae2 <memset>
  if(adcHandle->Instance==ADC1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <HAL_ADC_MspInit+0xc4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d144      	bne.n	80006f2 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000668:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800066c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800066e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000672:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800067c:	2310      	movs	r3, #16
 800067e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000680:	2307      	movs	r3, #7
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800068c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fa9c 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80006a2:	f000 f999 	bl	80009d8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <HAL_ADC_MspInit+0xc8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <HAL_ADC_MspInit+0xcc>)
 80006ee:	f002 fa2b 	bl	8002b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f2:	bf00      	nop
 80006f4:	3790      	adds	r7, #144	@ 0x90
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	50040000 	.word	0x50040000
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_DMA_Init+0x38>)
 8000710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000712:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <MX_DMA_Init+0x38>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6493      	str	r3, [r2, #72]	@ 0x48
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_DMA_Init+0x38>)
 800071c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	200d      	movs	r0, #13
 800072c:	f001 fd79 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000730:	200d      	movs	r0, #13
 8000732:	f001 fd92 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b3d      	ldr	r3, [pc, #244]	@ (8000850 <MX_GPIO_Init+0x10c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a3c      	ldr	r2, [pc, #240]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b3a      	ldr	r3, [pc, #232]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a36      	ldr	r2, [pc, #216]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <MX_GPIO_Init+0x10c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a30      	ldr	r2, [pc, #192]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_GPIO_Init+0x10c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|TEST_LED_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ac:	f002 fb5e 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4827      	ldr	r0, [pc, #156]	@ (8000854 <MX_GPIO_Init+0x110>)
 80007b6:	f002 fb59 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PAPin PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|TEST_LED_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80007ba:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d6:	f002 f9b7 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007da:	2302      	movs	r3, #2
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4818      	ldr	r0, [pc, #96]	@ (8000854 <MX_GPIO_Init+0x110>)
 80007f2:	f002 f9a9 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80007f6:	2340      	movs	r3, #64	@ 0x40
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4813      	ldr	r0, [pc, #76]	@ (8000858 <MX_GPIO_Init+0x114>)
 800080a:	f002 f99d 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <MX_GPIO_Init+0x114>)
 8000822:	f002 f991 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000826:	23c0      	movs	r3, #192	@ 0xc0
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000836:	2307      	movs	r3, #7
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x110>)
 8000842:	f002 f981 	bl	8002b48 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000800 	.word	0x48000800

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fac8 	bl	8000df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f871 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f7ff ff6b 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 800086e:	f7ff ff4b 	bl	8000708 <MX_DMA_Init>
  MX_ADC1_Init();
 8000872:	f7ff fe7d 	bl	8000570 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000876:	f000 f9d3 	bl	8000c20 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* ------------------------[ 2. 통신 및 큐 초기화 ]------------------------ */
  bQueueinit(&rxQueue, rxBuffer, RX_BUFFER_SIZE);  ///< 수신용 순환 큐 초기화
 800087a:	2220      	movs	r2, #32
 800087c:	4913      	ldr	r1, [pc, #76]	@ (80008cc <main+0x70>)
 800087e:	4814      	ldr	r0, [pc, #80]	@ (80008d0 <main+0x74>)
 8000880:	f005 fbbe 	bl	8006000 <bQueueinit>
  InitLoRaModule();                                 ///< LoRa 모듈 설정 및 통신 초기화
 8000884:	f005 f8f4 	bl	8005a70 <InitLoRaModule>
  HAL_Delay(500);                                   ///< LoRa 안정화 대기
 8000888:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088c:	f000 fb28 	bl	8000ee0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx_byte, 1); ///< UART 수신 인터럽트 등록 (1바이트)
 8000890:	2201      	movs	r2, #1
 8000892:	4910      	ldr	r1, [pc, #64]	@ (80008d4 <main+0x78>)
 8000894:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <main+0x7c>)
 8000896:	f003 fdd3 	bl	8004440 <HAL_UART_Receive_IT>

  /* ------------------------[ 3. 센서 초기화 ]------------------------ */
  InitAllSensors();                                 ///< PIR / CDS / LED 관련 초기 설정
 800089a:	f005 fd4d 	bl	8006338 <InitAllSensors>
  lastSensorProcessTime = HAL_GetTick();            ///< 센서 주기 처리 기준 시각 설정
 800089e:	f000 fb13 	bl	8000ec8 <HAL_GetTick>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <main+0x80>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* ------------------------[ 4. 메인 루프 ]------------------------ */
     while (1) {
         uint32_t now = HAL_GetTick();  ///< 현재 시각 갱신
 80008a8:	f000 fb0e 	bl	8000ec8 <HAL_GetTick>
 80008ac:	6078      	str	r0, [r7, #4]

         // (1) 센서 상태 주기적 검사
         if (now - lastSensorProcessTime >= SENSOR_UPDATE_INTERVAL_MS) {
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <main+0x80>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008ba:	d304      	bcc.n	80008c6 <main+0x6a>
             lastSensorProcessTime = now;
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <main+0x80>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
             ProcessAllSensors();       ///< PIR, CDS 상태 검사 및 LED 상태 보고
 80008c2:	f005 fe2d 	bl	8006520 <ProcessAllSensors>
         }
             ProcessLoRaReception();    ///< LoRa 패킷 파싱 및 명령 처리
 80008c6:	f005 f98b 	bl	8005be0 <ProcessLoRaReception>
     while (1) {
 80008ca:	e7ed      	b.n	80008a8 <main+0x4c>
 80008cc:	20000120 	.word	0x20000120
 80008d0:	20000140 	.word	0x20000140
 80008d4:	2000011c 	.word	0x2000011c
 80008d8:	20000178 	.word	0x20000178
 80008dc:	20000118 	.word	0x20000118

080008e0 <HAL_UART_RxCpltCallback>:
      }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART3) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_UART_RxCpltCallback+0x30>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d10a      	bne.n	8000908 <HAL_UART_RxCpltCallback+0x28>
      bEnqueue(&rxQueue, rx_byte);  ///< 수신 바이트를 큐에 삽입
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_UART_RxCpltCallback+0x34>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <HAL_UART_RxCpltCallback+0x38>)
 80008fa:	f005 fbd0 	bl	800609e <bEnqueue>
      ///< 다음 바이트 수신 대기 (인터럽트 재등록)
      HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	4904      	ldr	r1, [pc, #16]	@ (8000914 <HAL_UART_RxCpltCallback+0x34>)
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <HAL_UART_RxCpltCallback+0x3c>)
 8000904:	f003 fd9c 	bl	8004440 <HAL_UART_Receive_IT>
   }
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40004800 	.word	0x40004800
 8000914:	2000011c 	.word	0x2000011c
 8000918:	20000140 	.word	0x20000140
 800091c:	20000178 	.word	0x20000178

08000920 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
   if (huart == &huart3) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <HAL_UART_ErrorCallback+0x24>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d104      	bne.n	800093a <HAL_UART_ErrorCallback+0x1a>
      HAL_UART_Receive_IT(huart, (uint8_t*) &rx_byte, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	4905      	ldr	r1, [pc, #20]	@ (8000948 <HAL_UART_ErrorCallback+0x28>)
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f003 fd83 	bl	8004440 <HAL_UART_Receive_IT>
   }
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000178 	.word	0x20000178
 8000948:	2000011c 	.word	0x2000011c

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	@ 0x58
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2244      	movs	r2, #68	@ 0x44
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f006 f8c1 	bl	8006ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000972:	f002 faa1 	bl	8002eb8 <HAL_PWREx_ControlVoltageScaling>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800097c:	f000 f82c 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000980:	2310      	movs	r3, #16
 8000982:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098c:	2360      	movs	r3, #96	@ 0x60
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fae3 	bl	8002f64 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f818 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fee3 	bl	800378c <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009cc:	f000 f804 	bl	80009d8 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3758      	adds	r7, #88	@ 0x58
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 fa0d 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <DMA1_Channel3_IRQHandler+0x10>)
 8000a92:	f001 fd34 	bl	80024fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000200 	.word	0x20000200

08000aa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <USART3_IRQHandler+0x10>)
 8000aa6:	f003 fd17 	bl	80044d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000178 	.word	0x20000178

08000ab4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
  }

  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
  }
  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f005 ffde 	bl	8006b80 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000174 	.word	0x20000174
 8000bf8:	20000410 	.word	0x20000410

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <MX_USART3_UART_Init+0x5c>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USART3_UART_Init+0x58>)
 8000c64:	f003 fb14 	bl	8004290 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f7ff feb3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000178 	.word	0x20000178
 8000c7c:	40004800 	.word	0x40004800

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0a4      	sub	sp, #144	@ 0x90
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2268      	movs	r2, #104	@ 0x68
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 ff1e 	bl	8006ae2 <memset>
  if(uartHandle->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a39      	ldr	r2, [pc, #228]	@ (8000d90 <HAL_UART_MspInit+0x110>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d16a      	bne.n	8000d86 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 ff89 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff fe86 	bl	80009d8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ccc:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b28      	ldr	r3, [pc, #160]	@ (8000d94 <HAL_UART_MspInit+0x114>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cfc:	2330      	movs	r3, #48	@ 0x30
 8000cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d12:	2307      	movs	r3, #7
 8000d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481e      	ldr	r0, [pc, #120]	@ (8000d98 <HAL_UART_MspInit+0x118>)
 8000d20:	f001 ff12 	bl	8002b48 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_UART_MspInit+0x120>)
 8000d28:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d50:	2220      	movs	r2, #32
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d5c:	f001 fa98 	bl	8002290 <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8000d66:	f7ff fe37 	bl	80009d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d6e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_UART_MspInit+0x11c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2027      	movs	r0, #39	@ 0x27
 8000d7c:	f001 fa51 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d80:	2027      	movs	r0, #39	@ 0x27
 8000d82:	f001 fa6a 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d86:	bf00      	nop
 8000d88:	3790      	adds	r7, #144	@ 0x90
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004800 	.word	0x40004800
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	20000200 	.word	0x20000200
 8000da0:	40020030 	.word	0x40020030

08000da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da8:	f7ff ff28 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490d      	ldr	r1, [pc, #52]	@ (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f005 fedb 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd6:	f7ff fd41 	bl	800085c <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000de8:	080077fc 	.word	0x080077fc
  ldr r2, =_sbss
 8000dec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000df0:	2000040c 	.word	0x2000040c

08000df4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_IRQHandler>

08000df6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f001 fa03 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e06:	200f      	movs	r0, #15
 8000e08:	f000 f80e 	bl	8000e28 <HAL_InitTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	e001      	b.n	8000e1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e18:	f7ff fde4 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_InitTick+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_InitTick+0x70>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fa0f 	bl	8002276 <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10f      	bne.n	8000e7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d809      	bhi.n	8000e78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f001 f9d9 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_InitTick+0x74>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e004      	b.n	8000e88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e001      	b.n	8000e88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000248 	.word	0x20000248

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000248 	.word	0x20000248

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3360      	adds	r3, #96	@ 0x60
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <LL_ADC_SetOffset+0x44>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	03fff000 	.word	0x03fff000

08000fd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3360      	adds	r3, #96	@ 0x60
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3360      	adds	r3, #96	@ 0x60
 8001014:	461a      	mov	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	615a      	str	r2, [r3, #20]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001086:	b480      	push	{r7}
 8001088:	b087      	sub	sp, #28
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3330      	adds	r3, #48	@ 0x30
 8001096:	461a      	mov	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	4413      	add	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	211f      	movs	r1, #31
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	f003 011f 	and.w	r1, r3, #31
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3314      	adds	r3, #20
 80010ee:	461a      	mov	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	0e5b      	lsrs	r3, r3, #25
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	0d1b      	lsrs	r3, r3, #20
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	2107      	movs	r1, #7
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0d1b      	lsrs	r3, r3, #20
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114c:	43db      	mvns	r3, r3
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0318 	and.w	r3, r3, #24
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001158:	40d9      	lsrs	r1, r3
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	400b      	ands	r3, r1
 800115e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001162:	431a      	orrs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	0007ffff 	.word	0x0007ffff

0800117c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800118c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6093      	str	r3, [r2, #8]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011b4:	d101      	bne.n	80011ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80011d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001204:	d101      	bne.n	800120a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <LL_ADC_IsEnabled+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_IsEnabled+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001276:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800127a:	f043 0204 	orr.w	r2, r3, #4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d101      	bne.n	80012a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d101      	bne.n	80012cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e129      	b.n	800154a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff f997 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff3f 	bl	80011a0 <LL_ADC_IsDeepPowerDownEnabled>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff25 	bl	800117c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff5a 	bl	80011f0 <LL_ADC_IsInternalRegulatorEnabled>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff3e 	bl	80011c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800134c:	4b81      	ldr	r3, [pc, #516]	@ (8001554 <HAL_ADC_Init+0x278>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	099b      	lsrs	r3, r3, #6
 8001352:	4a81      	ldr	r2, [pc, #516]	@ (8001558 <HAL_ADC_Init+0x27c>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	3301      	adds	r3, #1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001360:	e002      	b.n	8001368 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff3c 	bl	80011f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff75 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 80013a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 80c2 	bne.w	8001538 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 80be 	bne.w	8001538 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013c4:	f043 0202 	orr.w	r2, r3, #2
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff35 	bl	8001240 <LL_ADC_IsEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10b      	bne.n	80013f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013dc:	485f      	ldr	r0, [pc, #380]	@ (800155c <HAL_ADC_Init+0x280>)
 80013de:	f7ff ff2f 	bl	8001240 <LL_ADC_IsEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4619      	mov	r1, r3
 80013ee:	485c      	ldr	r0, [pc, #368]	@ (8001560 <HAL_ADC_Init+0x284>)
 80013f0:	f7ff fd9a 	bl	8000f28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e5b      	ldrb	r3, [r3, #25]
 80013f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001404:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800140a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001412:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	3b01      	subs	r3, #1
 8001428:	045b      	lsls	r3, r3, #17
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d009      	beq.n	800144c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b44      	ldr	r3, [pc, #272]	@ (8001564 <HAL_ADC_Init+0x288>)
 8001454:	4013      	ands	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	430b      	orrs	r3, r1
 800145e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff25 	bl	80012b4 <LL_ADC_INJ_IsConversionOngoing>
 800146a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d140      	bne.n	80014f4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13d      	bne.n	80014f4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001482:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800148a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800149a:	f023 0306 	bic.w	r3, r3, #6
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d118      	bne.n	80014e4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014d4:	430a      	orrs	r2, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	e007      	b.n	80014f4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10c      	bne.n	8001516 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f023 010f 	bic.w	r1, r3, #15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	1e5a      	subs	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	631a      	str	r2, [r3, #48]	@ 0x30
 8001514:	e007      	b.n	8001526 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020f 	bic.w	r2, r2, #15
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	f023 0303 	bic.w	r3, r3, #3
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	@ 0x58
 8001536:	e007      	b.n	8001548 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f043 0210 	orr.w	r2, r3, #16
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001548:	7ffb      	ldrb	r3, [r7, #31]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000
 8001558:	053e2d63 	.word	0x053e2d63
 800155c:	50040000 	.word	0x50040000
 8001560:	50040300 	.word	0x50040300
 8001564:	fff0c007 	.word	0xfff0c007

08001568 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe8a 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d14f      	bne.n	8001620 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Start+0x26>
 800158a:	2302      	movs	r3, #2
 800158c:	e04b      	b.n	8001626 <HAL_ADC_Start+0xbe>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fce2 	bl	8001f60 <ADC_Enable>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d137      	bne.n	8001616 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015c6:	d106      	bne.n	80015d6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015cc:	f023 0206 	bic.w	r2, r3, #6
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	221c      	movs	r2, #28
 80015e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001602:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe29 	bl	8001266 <LL_ADC_REG_StartConversion>
 8001614:	e006      	b.n	8001624 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800161e:	e001      	b.n	8001624 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001620:	2302      	movs	r3, #2
 8001622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d102      	bne.n	8001646 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001640:	2308      	movs	r3, #8
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e010      	b.n	8001668 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f043 0220 	orr.w	r2, r3, #32
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e06f      	b.n	8001744 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001664:	2304      	movs	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001668:	f7ff fc2e 	bl	8000ec8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800166e:	e021      	b.n	80016b4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d01d      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001678:	f7ff fc26 	bl	8000ec8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d302      	bcc.n	800168e <HAL_ADC_PollForConversion+0x60>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d112      	bne.n	80016b4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10b      	bne.n	80016b4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e047      	b.n	8001744 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0d6      	beq.n	8001670 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fcc4 	bl	8001060 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01c      	beq.n	8001718 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7e5b      	ldrb	r3, [r3, #25]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d111      	bne.n	8001718 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b08      	cmp	r3, #8
 8001724:	d104      	bne.n	8001730 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2208      	movs	r2, #8
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e008      	b.n	8001742 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0b6      	sub	sp, #216	@ 0xd8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ADC_ConfigChannel+0x22>
 8001786:	2302      	movs	r3, #2
 8001788:	e3d5      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x7ce>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fd79 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 83ba 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d824      	bhi.n	80017fe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	3b02      	subs	r3, #2
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d81b      	bhi.n	80017f6 <HAL_ADC_ConfigChannel+0x8e>
 80017be:	a201      	add	r2, pc, #4	@ (adr r2, 80017c4 <HAL_ADC_ConfigChannel+0x5c>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080017dd 	.word	0x080017dd
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017ed 	.word	0x080017ed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017d4:	230c      	movs	r3, #12
 80017d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017da:	e010      	b.n	80017fe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017dc:	2312      	movs	r3, #18
 80017de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017e2:	e00c      	b.n	80017fe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017e4:	2318      	movs	r3, #24
 80017e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017ea:	e008      	b.n	80017fe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017f4:	e003      	b.n	80017fe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017f6:	2306      	movs	r3, #6
 80017f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017fc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800180c:	f7ff fc3b 	bl	8001086 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fd3a 	bl	800128e <LL_ADC_REG_IsConversionOngoing>
 800181a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fd46 	bl	80012b4 <LL_ADC_INJ_IsConversionOngoing>
 8001828:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800182c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 81bf 	bne.w	8001bb4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 81ba 	bne.w	8001bb4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001848:	d10f      	bne.n	800186a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff fc42 	bl	80010de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fbe9 	bl	800103a <LL_ADC_SetSamplingTimeCommonConfig>
 8001868:	e00e      	b.n	8001888 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	461a      	mov	r2, r3
 8001878:	f7ff fc31 	bl	80010de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fbd9 	bl	800103a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d00a      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6919      	ldr	r1, [r3, #16]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018ba:	f7ff fb69 	bl	8000f90 <LL_ADC_SetOffset>
 80018be:	e179      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb86 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x184>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb7b 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	f003 021f 	and.w	r2, r3, #31
 80018ea:	e01e      	b.n	800192a <HAL_ADC_ConfigChannel+0x1c2>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb70 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800190a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800190e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800191a:	2320      	movs	r3, #32
 800191c:	e004      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800191e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x1da>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	e018      	b.n	8001974 <HAL_ADC_ConfigChannel+0x20c>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800195e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001966:	2320      	movs	r3, #32
 8001968:	e004      	b.n	8001974 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800196a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001974:	429a      	cmp	r2, r3
 8001976:	d106      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fb3f 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fb23 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x24a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb18 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	e01e      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x288>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb0d 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e004      	b.n	80019ee <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80019e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x2a0>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	e018      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x2d2>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e004      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d106      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fadc 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2102      	movs	r1, #2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fac0 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10a      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x310>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2102      	movs	r1, #2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fab5 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	f003 021f 	and.w	r2, r3, #31
 8001a76:	e01e      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x34e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff faaa 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e004      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x366>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	e014      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x390>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e004      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d106      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2102      	movs	r1, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa7d 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fa61 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x3ce>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2103      	movs	r1, #3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa56 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	e017      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x3fe>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fa4b 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b50:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x416>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	e011      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x43a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b96:	2320      	movs	r3, #32
 8001b98:	e003      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	2103      	movs	r1, #3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa28 	bl	8001004 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb41 	bl	8001240 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 813f 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f7ff faae 	bl	8001134 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8001e18 <HAL_ADC_ConfigChannel+0x6b0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	f040 8130 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10b      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x4a4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	bf94      	ite	ls
 8001c04:	2301      	movls	r3, #1
 8001c06:	2300      	movhi	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e019      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x4d8>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c24:	2320      	movs	r3, #32
 8001c26:	e003      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2b09      	cmp	r3, #9
 8001c38:	bf94      	ite	ls
 8001c3a:	2301      	movls	r3, #1
 8001c3c:	2300      	movhi	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d079      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x4f8>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	3301      	adds	r3, #1
 8001c58:	069b      	lsls	r3, r3, #26
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5e:	e015      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x524>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c70:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e003      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x544>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	e017      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x574>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e003      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	ea42 0103 	orr.w	r1, r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x59a>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	051b      	lsls	r3, r3, #20
 8001d00:	e018      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x5cc>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d34:	430b      	orrs	r3, r1
 8001d36:	e080      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x5ec>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	069b      	lsls	r3, r3, #26
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d52:	e015      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x618>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e003      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x638>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	3301      	adds	r3, #1
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	e017      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x668>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	61bb      	str	r3, [r7, #24]
  return result;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	ea42 0103 	orr.w	r1, r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x694>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	3301      	adds	r3, #1
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	3b1e      	subs	r3, #30
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	e01d      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x6d0>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	60fb      	str	r3, [r7, #12]
  return result;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e005      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x6bc>
 8001e18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	051b      	lsls	r3, r3, #20
 8001e34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff f94d 	bl	80010de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d06c      	beq.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e50:	483c      	ldr	r0, [pc, #240]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e52:	f7ff f88f 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 8001e56:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f48 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d127      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d121      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d157      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e82:	4619      	mov	r1, r3
 8001e84:	482f      	ldr	r0, [pc, #188]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e86:	f7ff f862 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8a:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	4a30      	ldr	r2, [pc, #192]	@ (8001f54 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	099b      	lsrs	r3, r3, #6
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ea4:	e002      	b.n	8001eac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f9      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb2:	e03a      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <HAL_ADC_ConfigChannel+0x7f0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d113      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <HAL_ADC_ConfigChannel+0x7e4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d12a      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ed8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001edc:	4619      	mov	r1, r3
 8001ede:	4819      	ldr	r0, [pc, #100]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ee0:	f7ff f835 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ee4:	e021      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <HAL_ADC_ConfigChannel+0x7f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d11c      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d116      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <HAL_ADC_ConfigChannel+0x7e4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f12:	f7ff f81c 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
 8001f16:	e008      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f32:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	37d8      	adds	r7, #216	@ 0xd8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	80080000 	.word	0x80080000
 8001f44:	50040300 	.word	0x50040300
 8001f48:	c7520000 	.word	0xc7520000
 8001f4c:	50040000 	.word	0x50040000
 8001f50:	20000000 	.word	0x20000000
 8001f54:	053e2d63 	.word	0x053e2d63
 8001f58:	cb840000 	.word	0xcb840000
 8001f5c:	80000001 	.word	0x80000001

08001f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f965 	bl	8001240 <LL_ADC_IsEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d169      	bne.n	8002050 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <ADC_Enable+0xfc>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e055      	b.n	8002052 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f934 	bl	8001218 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fb0:	482b      	ldr	r0, [pc, #172]	@ (8002060 <ADC_Enable+0x100>)
 8001fb2:	f7fe ffdf 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 8001fb6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <ADC_Enable+0x104>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <ADC_Enable+0x108>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fda:	e002      	b.n	8001fe2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe ff6e 	bl	8000ec8 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fee:	e028      	b.n	8002042 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f923 	bl	8001240 <LL_ADC_IsEnabled>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f907 	bl	8001218 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200a:	f7fe ff5d 	bl	8000ec8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d914      	bls.n	8002042 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00d      	beq.n	8002042 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d1cf      	bne.n	8001ff0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	8000003f 	.word	0x8000003f
 8002060:	50040300 	.word	0x50040300
 8002064:	20000000 	.word	0x20000000
 8002068:	053e2d63 	.word	0x053e2d63

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e098      	b.n	80023d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <HAL_DMA_Init+0x150>)
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d80f      	bhi.n	80022ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <HAL_DMA_Init+0x154>)
 80022b6:	4413      	add	r3, r2
 80022b8:	4a4b      	ldr	r2, [pc, #300]	@ (80023e8 <HAL_DMA_Init+0x158>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a48      	ldr	r2, [pc, #288]	@ (80023ec <HAL_DMA_Init+0x15c>)
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80022cc:	e00e      	b.n	80022ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b46      	ldr	r3, [pc, #280]	@ (80023f0 <HAL_DMA_Init+0x160>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4a43      	ldr	r2, [pc, #268]	@ (80023e8 <HAL_DMA_Init+0x158>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	009a      	lsls	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a42      	ldr	r2, [pc, #264]	@ (80023f4 <HAL_DMA_Init+0x164>)
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002306:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002346:	d039      	beq.n	80023bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Init+0x15c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d11a      	bne.n	8002388 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002352:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	210f      	movs	r1, #15
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	4924      	ldr	r1, [pc, #144]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002368:	4013      	ands	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800236c:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_DMA_Init+0x168>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	f003 031c 	and.w	r3, r3, #28
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	491d      	ldr	r1, [pc, #116]	@ (80023f8 <HAL_DMA_Init+0x168>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	e019      	b.n	80023bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002388:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <HAL_DMA_Init+0x16c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	f003 031c 	and.w	r3, r3, #28
 8002394:	210f      	movs	r1, #15
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	4917      	ldr	r1, [pc, #92]	@ (80023fc <HAL_DMA_Init+0x16c>)
 800239e:	4013      	ands	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_DMA_Init+0x16c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	4911      	ldr	r1, [pc, #68]	@ (80023fc <HAL_DMA_Init+0x16c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40020407 	.word	0x40020407
 80023e4:	bffdfff8 	.word	0xbffdfff8
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	40020000 	.word	0x40020000
 80023f0:	bffdfbf8 	.word	0xbffdfbf8
 80023f4:	40020400 	.word	0x40020400
 80023f8:	400200a8 	.word	0x400200a8
 80023fc:	400204a8 	.word	0x400204a8

08002400 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d008      	beq.n	800242a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e022      	b.n	8002470 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 020e 	bic.w	r2, r2, #14
 8002438:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f003 021c 	and.w	r2, r3, #28
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d005      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	e029      	b.n	80024f4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020e 	bic.w	r2, r2, #14
 80024ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c4:	f003 021c 	and.w	r2, r3, #28
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    }
  }
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f003 031c 	and.w	r3, r3, #28
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d026      	beq.n	8002578 <HAL_DMA_IRQHandler+0x7a>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d021      	beq.n	8002578 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0204 	bic.w	r2, r2, #4
 8002550:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f003 021c 	and.w	r2, r3, #28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	2104      	movs	r1, #4
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d071      	beq.n	8002652 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002576:	e06c      	b.n	8002652 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	f003 031c 	and.w	r3, r3, #28
 8002580:	2202      	movs	r2, #2
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02e      	beq.n	80025ea <HAL_DMA_IRQHandler+0xec>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d029      	beq.n	80025ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 020a 	bic.w	r2, r2, #10
 80025b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	f003 021c 	and.w	r2, r3, #28
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	2102      	movs	r1, #2
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d038      	beq.n	8002652 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025e8:	e033      	b.n	8002652 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f003 031c 	and.w	r3, r3, #28
 80025f2:	2208      	movs	r2, #8
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02a      	beq.n	8002654 <HAL_DMA_IRQHandler+0x156>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d025      	beq.n	8002654 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020e 	bic.w	r2, r2, #14
 8002616:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f003 021c 	and.w	r2, r3, #28
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002652:	bf00      	nop
 8002654:	bf00      	nop
}
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266e:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <HAL_FLASH_Program+0xd0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_FLASH_Program+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e053      	b.n	8002722 <HAL_FLASH_Program+0xc6>
 800267a:	4b2c      	ldr	r3, [pc, #176]	@ (800272c <HAL_FLASH_Program+0xd0>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002680:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002684:	f000 f888 	bl	8002798 <FLASH_WaitForLastOperation>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d143      	bne.n	800271a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_FLASH_Program+0xd0>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002698:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_FLASH_Program+0xd4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80026a4:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <HAL_FLASH_Program+0xd4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_FLASH_Program+0xd4>)
 80026aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80026b0:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_FLASH_Program+0xd0>)
 80026b2:	2202      	movs	r2, #2
 80026b4:	771a      	strb	r2, [r3, #28]
 80026b6:	e002      	b.n	80026be <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <HAL_FLASH_Program+0xd0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80026c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026c8:	68b8      	ldr	r0, [r7, #8]
 80026ca:	f000 f8bb 	bl	8002844 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80026ce:	2301      	movs	r3, #1
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e010      	b.n	80026f6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d002      	beq.n	80026e0 <HAL_FLASH_Program+0x84>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d10a      	bne.n	80026f6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	68b8      	ldr	r0, [r7, #8]
 80026e6:	f000 f8d3 	bl	8002890 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d102      	bne.n	80026f6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80026f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026f4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026f6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026fa:	f000 f84d 	bl	8002798 <FLASH_WaitForLastOperation>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_FLASH_Program+0xd4>)
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <HAL_FLASH_Program+0xd4>)
 8002712:	4013      	ands	r3, r2
 8002714:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002716:	f000 f9cd 	bl	8002ab4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_FLASH_Program+0xd0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

  return status;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000000c 	.word	0x2000000c
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_FLASH_Unlock+0x38>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da0b      	bge.n	800275e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_FLASH_Unlock+0x38>)
 8002748:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <HAL_FLASH_Unlock+0x3c>)
 800274a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_FLASH_Unlock+0x38>)
 800274e:	4a09      	ldr	r2, [pc, #36]	@ (8002774 <HAL_FLASH_Unlock+0x40>)
 8002750:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_FLASH_Unlock+0x38>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da01      	bge.n	800275e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800275e:	79fb      	ldrb	r3, [r7, #7]
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40022000 	.word	0x40022000
 8002770:	45670123 	.word	0x45670123
 8002774:	cdef89ab 	.word	0xcdef89ab

08002778 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_FLASH_Lock+0x1c>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	4a04      	ldr	r2, [pc, #16]	@ (8002794 <HAL_FLASH_Lock+0x1c>)
 8002782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002786:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40022000 	.word	0x40022000

08002798 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7fe fb92 	bl	8000ec8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80027a6:	e00d      	b.n	80027c4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d009      	beq.n	80027c4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80027b0:	f7fe fb8a 	bl	8000ec8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d801      	bhi.n	80027c4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e035      	b.n	8002830 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1eb      	bne.n	80027a8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <FLASH_WaitForLastOperation+0xa4>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01d      	beq.n	800281c <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80027e0:	4b17      	ldr	r3, [pc, #92]	@ (8002840 <FLASH_WaitForLastOperation+0xa8>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <FLASH_WaitForLastOperation+0xa8>)
 80027ea:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f2:	d307      	bcc.n	8002804 <FLASH_WaitForLastOperation+0x6c>
 80027f4:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80027fe:	490e      	ldr	r1, [pc, #56]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	618b      	str	r3, [r1, #24]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <FLASH_WaitForLastOperation+0x80>
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002816:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e009      	b.n	8002830 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <FLASH_WaitForLastOperation+0xa0>)
 800282a:	2201      	movs	r2, #1
 800282c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40022000 	.word	0x40022000
 800283c:	0002c3fa 	.word	0x0002c3fa
 8002840:	2000000c 	.word	0x2000000c

08002844 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <FLASH_Program_DoubleWord+0x48>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <FLASH_Program_DoubleWord+0x48>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002862:	f3bf 8f6f 	isb	sy
}
 8002866:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	000a      	movs	r2, r1
 8002876:	2300      	movs	r3, #0
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	3104      	adds	r1, #4
 800287c:	4613      	mov	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40022000 	.word	0x40022000

08002890 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800289a:	2340      	movs	r3, #64	@ 0x40
 800289c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80028a6:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <FLASH_Program_Fast+0x68>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <FLASH_Program_Fast+0x68>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8310 	mrs	r3, PRIMASK
 80028b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80028b8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80028ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	3304      	adds	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3304      	adds	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
    row_index--;
 80028d4:	7ffb      	ldrb	r3, [r7, #31]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80028da:	7ffb      	ldrb	r3, [r7, #31]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ef      	bne.n	80028c0 <FLASH_Program_Fast+0x30>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f383 8810 	msr	PRIMASK, r3
}
 80028ea:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80028ec:	bf00      	nop
 80028ee:	3724      	adds	r7, #36	@ 0x24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002906:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_FLASHEx_Erase+0x16>
 800290e:	2302      	movs	r3, #2
 8002910:	e085      	b.n	8002a1e <HAL_FLASHEx_Erase+0x122>
 8002912:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002918:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800291c:	f7ff ff3c 	bl	8002798 <FLASH_WaitForLastOperation>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d175      	bne.n	8002a16 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800292a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002930:	4b3e      	ldr	r3, [pc, #248]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800293c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002948:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a37      	ldr	r2, [pc, #220]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 800294e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002952:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002954:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 8002956:	2203      	movs	r2, #3
 8002958:	771a      	strb	r2, [r3, #28]
 800295a:	e016      	b.n	800298a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800295c:	4b32      	ldr	r3, [pc, #200]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 800295e:	2201      	movs	r2, #1
 8002960:	771a      	strb	r2, [r3, #28]
 8002962:	e012      	b.n	800298a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002970:	4b2e      	ldr	r3, [pc, #184]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2d      	ldr	r2, [pc, #180]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 8002976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800297a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 800297e:	2202      	movs	r2, #2
 8002980:	771a      	strb	r2, [r3, #28]
 8002982:	e002      	b.n	800298a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002984:	4b28      	ldr	r3, [pc, #160]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 8002986:	2200      	movs	r2, #0
 8002988:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d111      	bne.n	80029b6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f84a 	bl	8002a30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800299c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029a0:	f7ff fefa 	bl	8002798 <FLASH_WaitForLastOperation>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80029a8:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6153      	str	r3, [r2, #20]
 80029b4:	e02d      	b.n	8002a12 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	e01d      	b.n	8002a02 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4619      	mov	r1, r3
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f000 f84d 	bl	8002a6c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029d6:	f7ff fedf 	bl	8002798 <FLASH_WaitForLastOperation>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <HAL_FLASHEx_Erase+0x130>)
 80029e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	601a      	str	r2, [r3, #0]
          break;
 80029fa:	e00a      	b.n	8002a12 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3d9      	bcc.n	80029c6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002a12:	f000 f84f 	bl	8002ab4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <HAL_FLASHEx_Erase+0x12c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	40022000 	.word	0x40022000

08002a30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <FLASH_MassErase+0x38>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <FLASH_MassErase+0x38>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <FLASH_MassErase+0x38>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <FLASH_MassErase+0x38>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6153      	str	r3, [r2, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000

08002a6c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002a76:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a92:	f043 0302 	orr.w	r3, r3, #2
 8002a96:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <FLASH_PageErase+0x44>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa2:	6153      	str	r3, [r2, #20]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <FLASH_FlushCaches+0x8c>)
 8002abc:	7f1b      	ldrb	r3, [r3, #28]
 8002abe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d002      	beq.n	8002acc <FLASH_FlushCaches+0x18>
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d117      	bne.n	8002afc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002ad2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002ade:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d002      	beq.n	8002b08 <FLASH_FlushCaches+0x54>
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d111      	bne.n	8002b2c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <FLASH_FlushCaches+0x90>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <FLASH_FlushCaches+0x8c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	771a      	strb	r2, [r3, #28]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b56:	e154      	b.n	8002e02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8146 	beq.w	8002dfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d005      	beq.n	8002b88 <HAL_GPIO_Init+0x40>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d130      	bne.n	8002bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0201 	and.w	r2, r3, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d017      	beq.n	8002c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d123      	bne.n	8002c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	6939      	ldr	r1, [r7, #16]
 8002c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0203 	and.w	r2, r3, #3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a0 	beq.w	8002dfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b58      	ldr	r3, [pc, #352]	@ (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc0:	4a57      	ldr	r2, [pc, #348]	@ (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cc8:	4b55      	ldr	r3, [pc, #340]	@ (8002e20 <HAL_GPIO_Init+0x2d8>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd4:	4a53      	ldr	r2, [pc, #332]	@ (8002e24 <HAL_GPIO_Init+0x2dc>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cfe:	d019      	beq.n	8002d34 <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a49      	ldr	r2, [pc, #292]	@ (8002e28 <HAL_GPIO_Init+0x2e0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a48      	ldr	r2, [pc, #288]	@ (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00d      	beq.n	8002d2c <HAL_GPIO_Init+0x1e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a47      	ldr	r2, [pc, #284]	@ (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d007      	beq.n	8002d28 <HAL_GPIO_Init+0x1e0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d101      	bne.n	8002d24 <HAL_GPIO_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e008      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d24:	2307      	movs	r3, #7
 8002d26:	e006      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e004      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e002      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_GPIO_Init+0x1ee>
 8002d34:	2300      	movs	r3, #0
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	f002 0203 	and.w	r2, r2, #3
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4093      	lsls	r3, r2
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d46:	4937      	ldr	r1, [pc, #220]	@ (8002e24 <HAL_GPIO_Init+0x2dc>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d54:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d78:	4a2f      	ldr	r2, [pc, #188]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002da2:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002da8:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f aea3 	bne.w	8002b58 <HAL_GPIO_Init+0x10>
  }
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010000 	.word	0x40010000
 8002e28:	48000400 	.word	0x48000400
 8002e2c:	48000800 	.word	0x48000800
 8002e30:	48000c00 	.word	0x48000c00
 8002e34:	48001000 	.word	0x48001000
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e001      	b.n	8002e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea0:	4b04      	ldr	r3, [pc, #16]	@ (8002eb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec6:	d130      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed4:	d038      	beq.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ede:	4a1e      	ldr	r2, [pc, #120]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2232      	movs	r2, #50	@ 0x32
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efc:	e002      	b.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f04:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d102      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f2      	bne.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f24:	d110      	bne.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e00f      	b.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f36:	d007      	beq.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f40:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	431bde83 	.word	0x431bde83

08002f64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f000 bc02 	b.w	800377c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f78:	4b96      	ldr	r3, [pc, #600]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f82:	4b94      	ldr	r3, [pc, #592]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80e4 	beq.w	8003162 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4c>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	f040 808b 	bne.w	80030be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f040 8087 	bne.w	80030be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb0:	4b88      	ldr	r3, [pc, #544]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x64>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e3d9      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	4b81      	ldr	r3, [pc, #516]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x7e>
 8002fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe0:	e005      	b.n	8002fee <HAL_RCC_OscConfig+0x8a>
 8002fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d223      	bcs.n	800303a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fd8c 	bl	8003b14 <RCC_SetFlashLatencyFromMSIRange>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e3ba      	b.n	800377c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003006:	4b73      	ldr	r3, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a72      	ldr	r2, [pc, #456]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 800300c:	f043 0308 	orr.w	r3, r3, #8
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	496d      	ldr	r1, [pc, #436]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	4968      	ldr	r1, [pc, #416]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e025      	b.n	8003086 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303a:	4b66      	ldr	r3, [pc, #408]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a65      	ldr	r2, [pc, #404]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b63      	ldr	r3, [pc, #396]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4960      	ldr	r1, [pc, #384]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003058:	4b5e      	ldr	r3, [pc, #376]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	495b      	ldr	r1, [pc, #364]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fd4c 	bl	8003b14 <RCC_SetFlashLatencyFromMSIRange>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e37a      	b.n	800377c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003086:	f000 fc81 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	4950      	ldr	r1, [pc, #320]	@ (80031d8 <HAL_RCC_OscConfig+0x274>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	4a4e      	ldr	r2, [pc, #312]	@ (80031dc <HAL_RCC_OscConfig+0x278>)
 80030a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030a6:	4b4e      	ldr	r3, [pc, #312]	@ (80031e0 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd febc 	bl	8000e28 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d052      	beq.n	8003160 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	e35e      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d032      	beq.n	800312c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c6:	4b43      	ldr	r3, [pc, #268]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a42      	ldr	r2, [pc, #264]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d2:	f7fd fef9 	bl	8000ec8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030da:	f7fd fef5 	bl	8000ec8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e347      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ec:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f8:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a35      	ldr	r2, [pc, #212]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030fe:	f043 0308 	orr.w	r3, r3, #8
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b33      	ldr	r3, [pc, #204]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4930      	ldr	r1, [pc, #192]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003116:	4b2f      	ldr	r3, [pc, #188]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	492b      	ldr	r1, [pc, #172]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
 800312a:	e01a      	b.n	8003162 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800312c:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003138:	f7fd fec6 	bl	8000ec8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003140:	f7fd fec2 	bl	8000ec8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e314      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1dc>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d073      	beq.n	8003256 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d005      	beq.n	8003180 <HAL_RCC_OscConfig+0x21c>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d10e      	bne.n	8003198 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d063      	beq.n	8003254 <HAL_RCC_OscConfig+0x2f0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d15f      	bne.n	8003254 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e2f1      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x24c>
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e025      	b.n	80031fc <HAL_RCC_OscConfig+0x298>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d114      	bne.n	80031e4 <HAL_RCC_OscConfig+0x280>
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b03      	ldr	r3, [pc, #12]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a02      	ldr	r2, [pc, #8]	@ (80031d4 <HAL_RCC_OscConfig+0x270>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e013      	b.n	80031fc <HAL_RCC_OscConfig+0x298>
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08007770 	.word	0x08007770
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004
 80031e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fd fe60 	bl	8000ec8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fd fe5c 	bl	8000ec8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	@ 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e2ae      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	4b92      	ldr	r3, [pc, #584]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x2a8>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fd fe4c 	bl	8000ec8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fd fe48 	bl	8000ec8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e29a      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003246:	4b88      	ldr	r3, [pc, #544]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x2d0>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d060      	beq.n	8003324 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d005      	beq.n	8003274 <HAL_RCC_OscConfig+0x310>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d119      	bne.n	80032a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d116      	bne.n	80032a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003274:	4b7c      	ldr	r3, [pc, #496]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x328>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e277      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b76      	ldr	r3, [pc, #472]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	4973      	ldr	r1, [pc, #460]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	e040      	b.n	8003324 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd fe07 	bl	8000ec8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fe03 	bl	8000ec8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e255      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d0:	4b65      	ldr	r3, [pc, #404]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b62      	ldr	r3, [pc, #392]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	495f      	ldr	r1, [pc, #380]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e018      	b.n	8003324 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fd fde3 	bl	8000ec8 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7fd fddf 	bl	8000ec8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e231      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003318:	4b53      	ldr	r3, [pc, #332]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d03c      	beq.n	80033aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01c      	beq.n	8003372 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003338:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	4a4a      	ldr	r2, [pc, #296]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fd fdbe 	bl	8000ec8 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fd fdba 	bl	8000ec8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e20c      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003362:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCC_OscConfig+0x3ec>
 8003370:	e01b      	b.n	80033aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003372:	4b3d      	ldr	r3, [pc, #244]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	4a3b      	ldr	r2, [pc, #236]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fd fda1 	bl	8000ec8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fd fd9d 	bl	8000ec8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1ef      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800339c:	4b32      	ldr	r3, [pc, #200]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ef      	bne.n	800338a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a6 	beq.w	8003504 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	4a26      	ldr	r2, [pc, #152]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e4:	4b21      	ldr	r3, [pc, #132]	@ (800346c <HAL_RCC_OscConfig+0x508>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d118      	bne.n	8003422 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f0:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_RCC_OscConfig+0x508>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	@ (800346c <HAL_RCC_OscConfig+0x508>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fd64 	bl	8000ec8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003404:	f7fd fd60 	bl	8000ec8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1b2      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <HAL_RCC_OscConfig+0x508>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <HAL_RCC_OscConfig+0x4d8>
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343a:	e029      	b.n	8003490 <HAL_RCC_OscConfig+0x52c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d115      	bne.n	8003470 <HAL_RCC_OscConfig+0x50c>
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	4a03      	ldr	r2, [pc, #12]	@ (8003468 <HAL_RCC_OscConfig+0x504>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x52c>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
 8003470:	4b9a      	ldr	r3, [pc, #616]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003476:	4a99      	ldr	r2, [pc, #612]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003480:	4b96      	ldr	r3, [pc, #600]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a95      	ldr	r2, [pc, #596]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd fd16 	bl	8000ec8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fd12 	bl	8000ec8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e162      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	4b89      	ldr	r3, [pc, #548]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ed      	beq.n	80034a0 <HAL_RCC_OscConfig+0x53c>
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fcff 	bl	8000ec8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fd fcfb 	bl	8000ec8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e14b      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	4b7d      	ldr	r3, [pc, #500]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ed      	bne.n	80034ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b78      	ldr	r3, [pc, #480]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	4a77      	ldr	r2, [pc, #476]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003502:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03c      	beq.n	800358a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01c      	beq.n	8003552 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003518:	4b70      	ldr	r3, [pc, #448]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800351a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800351e:	4a6f      	ldr	r2, [pc, #444]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fcce 	bl	8000ec8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003530:	f7fd fcca 	bl	8000ec8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e11c      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003542:	4b66      	ldr	r3, [pc, #408]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003544:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <HAL_RCC_OscConfig+0x5cc>
 8003550:	e01b      	b.n	800358a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003552:	4b62      	ldr	r3, [pc, #392]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003558:	4a60      	ldr	r2, [pc, #384]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fd fcb1 	bl	8000ec8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356a:	f7fd fcad 	bl	8000ec8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0ff      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800357c:	4b57      	ldr	r3, [pc, #348]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800357e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ef      	bne.n	800356a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80f3 	beq.w	800377a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	2b02      	cmp	r3, #2
 800359a:	f040 80c9 	bne.w	8003730 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800359e:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0203 	and.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d12c      	bne.n	800360c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	3b01      	subs	r3, #1
 80035be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d123      	bne.n	800360c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d11b      	bne.n	800360c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d113      	bne.n	800360c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d109      	bne.n	800360c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d06b      	beq.n	80036e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d062      	beq.n	80036d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003612:	4b32      	ldr	r3, [pc, #200]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0ac      	b.n	800377c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003622:	4b2e      	ldr	r3, [pc, #184]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2d      	ldr	r2, [pc, #180]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800362c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800362e:	f7fd fc4b 	bl	8000ec8 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fd fc47 	bl	8000ec8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e099      	b.n	800377c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003648:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b21      	ldr	r3, [pc, #132]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x77c>)
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003664:	3a01      	subs	r2, #1
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800366e:	0212      	lsls	r2, r2, #8
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0552      	lsls	r2, r2, #21
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0652      	lsls	r2, r2, #25
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800368e:	06d2      	lsls	r2, r2, #27
 8003690:	430a      	orrs	r2, r1
 8003692:	4912      	ldr	r1, [pc, #72]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 8003694:	4313      	orrs	r3, r2
 8003696:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0f      	ldr	r2, [pc, #60]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a0c      	ldr	r2, [pc, #48]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b0:	f7fd fc0a 	bl	8000ec8 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fc06 	bl	8000ec8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e058      	b.n	800377c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <HAL_RCC_OscConfig+0x778>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d6:	e050      	b.n	800377a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e04f      	b.n	800377c <HAL_RCC_OscConfig+0x818>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e4:	4b27      	ldr	r3, [pc, #156]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d144      	bne.n	800377a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036f0:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a23      	ldr	r2, [pc, #140]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fc:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a20      	ldr	r2, [pc, #128]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003708:	f7fd fbde 	bl	8000ec8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd fbda 	bl	8000ec8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e02c      	b.n	800377c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x7ac>
 800372e:	e024      	b.n	800377a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d01f      	beq.n	8003776 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b13      	ldr	r3, [pc, #76]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 800373c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fbc1 	bl	8000ec8 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fd fbbd 	bl	8000ec8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00f      	b.n	800377c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4905      	ldr	r1, [pc, #20]	@ (8003784 <HAL_RCC_OscConfig+0x820>)
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_OscConfig+0x824>)
 8003770:	4013      	ands	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
 8003774:	e001      	b.n	800377a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	feeefffc 	.word	0xfeeefffc

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0e7      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b75      	ldr	r3, [pc, #468]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d910      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b72      	ldr	r3, [pc, #456]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4970      	ldr	r1, [pc, #448]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b6e      	ldr	r3, [pc, #440]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cf      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d908      	bls.n	80037fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b63      	ldr	r3, [pc, #396]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4960      	ldr	r1, [pc, #384]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04c      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003812:	4b5a      	ldr	r3, [pc, #360]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d121      	bne.n	8003862 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0a6      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d115      	bne.n	8003862 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e09a      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003842:	4b4e      	ldr	r3, [pc, #312]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e08e      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003852:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e086      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b46      	ldr	r3, [pc, #280]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4943      	ldr	r1, [pc, #268]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003874:	f7fd fb28 	bl	8000ec8 <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fd fb24 	bl	8000ec8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e06e      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	4b31      	ldr	r3, [pc, #196]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038bc:	429a      	cmp	r2, r3
 80038be:	d208      	bcs.n	80038d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c0:	4b2e      	ldr	r3, [pc, #184]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	492b      	ldr	r1, [pc, #172]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d2:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d210      	bcs.n	8003902 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 0207 	bic.w	r2, r3, #7
 80038e8:	4923      	ldr	r1, [pc, #140]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCC_ClockConfig+0x1ec>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e036      	b.n	8003970 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390e:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4918      	ldr	r1, [pc, #96]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4910      	ldr	r1, [pc, #64]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003940:	f000 f824 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	490b      	ldr	r1, [pc, #44]	@ (8003980 <HAL_RCC_ClockConfig+0x1f4>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <HAL_RCC_ClockConfig+0x1f8>)
 800395e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_RCC_ClockConfig+0x1fc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fa5f 	bl	8000e28 <HAL_InitTick>
 800396a:	4603      	mov	r3, r0
 800396c:	72fb      	strb	r3, [r7, #11]

  return status;
 800396e:	7afb      	ldrb	r3, [r7, #11]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
 8003980:	08007770 	.word	0x08007770
 8003984:	20000000 	.word	0x20000000
 8003988:	20000004 	.word	0x20000004

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	@ 0x24
 8003990:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d121      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d11e      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c0:	4b34      	ldr	r3, [pc, #208]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039cc:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e005      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e004      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a10:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d134      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xac>
 8003a30:	e005      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a34:	617b      	str	r3, [r7, #20]
      break;
 8003a36:	e005      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a3a:	617b      	str	r3, [r7, #20]
      break;
 8003a3c:	e002      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	617b      	str	r3, [r7, #20]
      break;
 8003a42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	3301      	adds	r3, #1
 8003a50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	0e5b      	lsrs	r3, r3, #25
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	3301      	adds	r3, #1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a84:	69bb      	ldr	r3, [r7, #24]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	@ 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	08007788 	.word	0x08007788
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ac0:	f7ff fff0 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4904      	ldr	r1, [pc, #16]	@ (8003ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	08007780 	.word	0x08007780

08003ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003aec:	f7ff ffda 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0adb      	lsrs	r3, r3, #11
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4904      	ldr	r1, [pc, #16]	@ (8003b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08007780 	.word	0x08007780

08003b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b20:	4b2a      	ldr	r3, [pc, #168]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b2c:	f7ff f9b6 	bl	8002e9c <HAL_PWREx_GetVoltageRange>
 8003b30:	6178      	str	r0, [r7, #20]
 8003b32:	e014      	b.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b40:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b4c:	f7ff f9a6 	bl	8002e9c <HAL_PWREx_GetVoltageRange>
 8003b50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d10b      	bne.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d919      	bls.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b70:	d902      	bls.n	8003b78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b72:	2302      	movs	r3, #2
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	e013      	b.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e010      	b.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d902      	bls.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b84:	2303      	movs	r3, #3
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	e00a      	b.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b80      	cmp	r3, #128	@ 0x80
 8003b8e:	d102      	bne.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b90:	2302      	movs	r3, #2
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	e004      	b.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b70      	cmp	r3, #112	@ 0x70
 8003b9a:	d101      	bne.n	8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 0207 	bic.w	r2, r3, #7
 8003ba8:	4909      	ldr	r1, [pc, #36]	@ (8003bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40022000 	.word	0x40022000

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003be0:	2300      	movs	r3, #0
 8003be2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d031      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bf8:	d01a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003bfa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bfe:	d814      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c16:	e00c      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fa44 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c38:	4b51      	ldr	r3, [pc, #324]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	494e      	ldr	r1, [pc, #312]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809e 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c66:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	4a3f      	ldr	r2, [pc, #252]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c88:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c98:	4b3a      	ldr	r3, [pc, #232]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca4:	f7fd f910 	bl	8000ec8 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003caa:	e009      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd f90c 	bl	8000ec8 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc0:	4b30      	ldr	r3, [pc, #192]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d15a      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d019      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cee:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1a:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f8cc 	bl	8000ec8 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd f8c8 	bl	8000ec8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ec      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d60:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d6e:	4904      	ldr	r1, [pc, #16]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b9e      	ldr	r3, [pc, #632]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4a9d      	ldr	r2, [pc, #628]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4b98      	ldr	r3, [pc, #608]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4994      	ldr	r1, [pc, #592]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 020c 	bic.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	498c      	ldr	r1, [pc, #560]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dee:	4b87      	ldr	r3, [pc, #540]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	4983      	ldr	r1, [pc, #524]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e10:	4b7e      	ldr	r3, [pc, #504]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	497b      	ldr	r1, [pc, #492]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e32:	4b76      	ldr	r3, [pc, #472]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	4972      	ldr	r1, [pc, #456]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e54:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	496a      	ldr	r1, [pc, #424]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e76:	4b65      	ldr	r3, [pc, #404]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e84:	4961      	ldr	r1, [pc, #388]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e98:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	4959      	ldr	r1, [pc, #356]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eba:	4b54      	ldr	r3, [pc, #336]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	4950      	ldr	r1, [pc, #320]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003edc:	4b4b      	ldr	r3, [pc, #300]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	4948      	ldr	r1, [pc, #288]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003efe:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f04:	f023 0203 	bic.w	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	493f      	ldr	r1, [pc, #252]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d028      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f20:	4b3a      	ldr	r3, [pc, #232]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2e:	4937      	ldr	r1, [pc, #220]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f40:	4b32      	ldr	r3, [pc, #200]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a31      	ldr	r2, [pc, #196]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4a:	60d3      	str	r3, [r2, #12]
 8003f4c:	e011      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f56:	d10c      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f8a4 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f7e:	4b23      	ldr	r3, [pc, #140]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8c:	491f      	ldr	r1, [pc, #124]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa8:	60d3      	str	r3, [r2, #12]
 8003faa:	e011      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f875 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d02b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fea:	4908      	ldr	r1, [pc, #32]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffa:	d109      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a02      	ldr	r2, [pc, #8]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004006:	60d3      	str	r3, [r2, #12]
 8004008:	e014      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f843 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	4916      	ldr	r1, [pc, #88]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800405e:	d10c      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f820 	bl	80040ac <RCCEx_PLLSAI1_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004086:	4b08      	ldr	r3, [pc, #32]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004094:	4904      	ldr	r1, [pc, #16]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800409c:	7cbb      	ldrb	r3, [r7, #18]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000

080040ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ba:	4b74      	ldr	r3, [pc, #464]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040c6:	4b71      	ldr	r3, [pc, #452]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d10d      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
       ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040de:	4b6b      	ldr	r3, [pc, #428]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
       ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d047      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e044      	b.n	8004182 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d018      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x86>
 8004100:	2b03      	cmp	r3, #3
 8004102:	d825      	bhi.n	8004150 <RCCEx_PLLSAI1_Config+0xa4>
 8004104:	2b01      	cmp	r3, #1
 8004106:	d002      	beq.n	800410e <RCCEx_PLLSAI1_Config+0x62>
 8004108:	2b02      	cmp	r3, #2
 800410a:	d009      	beq.n	8004120 <RCCEx_PLLSAI1_Config+0x74>
 800410c:	e020      	b.n	8004150 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800410e:	4b5f      	ldr	r3, [pc, #380]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11d      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411e:	e01a      	b.n	8004156 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004120:	4b5a      	ldr	r3, [pc, #360]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004130:	e013      	b.n	800415a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004132:	4b56      	ldr	r3, [pc, #344]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800413e:	4b53      	ldr	r3, [pc, #332]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800414e:	e006      	b.n	800415e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e004      	b.n	8004160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800415e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004166:	4b49      	ldr	r3, [pc, #292]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	430b      	orrs	r3, r1
 800417c:	4943      	ldr	r1, [pc, #268]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d17c      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004188:	4b40      	ldr	r3, [pc, #256]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3f      	ldr	r2, [pc, #252]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 800418e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004194:	f7fc fe98 	bl	8000ec8 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419a:	e009      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419c:	f7fc fe94 	bl	8000ec8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	73fb      	strb	r3, [r7, #15]
        break;
 80041ae:	e005      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ef      	bne.n	800419c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d15f      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c8:	4b30      	ldr	r3, [pc, #192]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80041d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	0211      	lsls	r1, r2, #8
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68d2      	ldr	r2, [r2, #12]
 80041de:	06d2      	lsls	r2, r2, #27
 80041e0:	430a      	orrs	r2, r1
 80041e2:	492a      	ldr	r1, [pc, #168]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	610b      	str	r3, [r1, #16]
 80041e8:	e027      	b.n	800423a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d112      	bne.n	8004216 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f0:	4b26      	ldr	r3, [pc, #152]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6892      	ldr	r2, [r2, #8]
 8004200:	0211      	lsls	r1, r2, #8
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6912      	ldr	r2, [r2, #16]
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	3a01      	subs	r2, #1
 800420a:	0552      	lsls	r2, r2, #21
 800420c:	430a      	orrs	r2, r1
 800420e:	491f      	ldr	r1, [pc, #124]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
 8004214:	e011      	b.n	800423a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004216:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800421e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	0211      	lsls	r1, r2, #8
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6952      	ldr	r2, [r2, #20]
 800422c:	0852      	lsrs	r2, r2, #1
 800422e:	3a01      	subs	r2, #1
 8004230:	0652      	lsls	r2, r2, #25
 8004232:	430a      	orrs	r2, r1
 8004234:	4915      	ldr	r1, [pc, #84]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a13      	ldr	r2, [pc, #76]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004240:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004244:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fc fe3f 	bl	8000ec8 <HAL_GetTick>
 800424a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424c:	e009      	b.n	8004262 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800424e:	f7fc fe3b 	bl	8000ec8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d902      	bls.n	8004262 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	73fb      	strb	r3, [r7, #15]
          break;
 8004260:	e005      	b.n	800426e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ef      	beq.n	800424e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e040      	b.n	8004324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fce4 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	@ 0x24
 80042bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fea0 	bl	800501c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fc17 	bl	8004b10 <UART_SetConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01b      	b.n	8004324 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 ff1f 	bl	8005160 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004340:	2b20      	cmp	r3, #32
 8004342:	d177      	bne.n	8004434 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Transmit+0x24>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e070      	b.n	8004436 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2221      	movs	r2, #33	@ 0x21
 8004360:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004362:	f7fc fdb1 	bl	8000ec8 <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004380:	d108      	bne.n	8004394 <HAL_UART_Transmit+0x68>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e003      	b.n	800439c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800439c:	e02f      	b.n	80043fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	@ 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 ff81 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e03b      	b.n	8004436 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	3302      	adds	r3, #2
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e007      	b.n	80043ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1c9      	bne.n	800439e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2140      	movs	r1, #64	@ 0x40
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 ff4b 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e005      	b.n	8004436 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004454:	2b20      	cmp	r3, #32
 8004456:	d137      	bne.n	80044c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_UART_Receive_IT+0x24>
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e030      	b.n	80044ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <HAL_UART_Receive_IT+0x94>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01f      	beq.n	80044b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	613b      	str	r3, [r7, #16]
   return(result);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 ff64 	bl	800538c <UART_Start_Receive_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3728      	adds	r7, #40	@ 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40008000 	.word	0x40008000

080044d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b0ba      	sub	sp, #232	@ 0xe8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004502:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004506:	4013      	ands	r3, r2
 8004508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800450c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d115      	bne.n	8004540 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00f      	beq.n	8004540 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 82ca 	beq.w	8004aca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
      }
      return;
 800453e:	e2c4      	b.n	8004aca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8117 	beq.w	8004778 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800454a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004556:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800455a:	4b85      	ldr	r3, [pc, #532]	@ (8004770 <HAL_UART_IRQHandler+0x298>)
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 810a 	beq.w	8004778 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d011      	beq.n	8004594 <HAL_UART_IRQHandler+0xbc>
 8004570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00b      	beq.n	8004594 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d011      	beq.n	80045c4 <HAL_UART_IRQHandler+0xec>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2202      	movs	r2, #2
 80045b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ba:	f043 0204 	orr.w	r2, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <HAL_UART_IRQHandler+0x11c>
 80045d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2204      	movs	r2, #4
 80045e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004610:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2208      	movs	r2, #8
 800461e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_UART_IRQHandler+0x18a>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8230 	beq.w	8004ace <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800467a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800469c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d04f      	beq.n	800475a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 ff2c 	bl	8005518 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d141      	bne.n	8004752 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3308      	adds	r3, #8
 80046d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1d9      	bne.n	80046ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004726:	4a13      	ldr	r2, [pc, #76]	@ (8004774 <HAL_UART_IRQHandler+0x29c>)
 8004728:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fea4 	bl	800247c <HAL_DMA_Abort_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d017      	beq.n	800476a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004744:	4610      	mov	r0, r2
 8004746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00f      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc f8e8 	bl	8000920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e00b      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc f8e4 	bl	8000920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e007      	b.n	800476a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fc f8e0 	bl	8000920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004768:	e1b1      	b.n	8004ace <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476a:	bf00      	nop
    return;
 800476c:	e1af      	b.n	8004ace <HAL_UART_IRQHandler+0x5f6>
 800476e:	bf00      	nop
 8004770:	04000120 	.word	0x04000120
 8004774:	080055e1 	.word	0x080055e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 816a 	bne.w	8004a56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8163 	beq.w	8004a56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 815c 	beq.w	8004a56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2210      	movs	r2, #16
 80047a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	f040 80d4 	bne.w	800495e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80ad 	beq.w	8004926 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047d6:	429a      	cmp	r2, r3
 80047d8:	f080 80a5 	bcs.w	8004926 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f040 8086 	bne.w	8004904 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800480c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004826:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800482e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800483a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1da      	bne.n	80047f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004866:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800486a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800486e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e1      	bne.n	8004842 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3308      	adds	r3, #8
 8004884:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800488e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e3      	bne.n	800487e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d4:	f023 0310 	bic.w	r3, r3, #16
 80048d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e4      	bne.n	80048c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fd7e 	bl	8002400 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004916:	b29b      	uxth	r3, r3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8ea 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004924:	e0d5      	b.n	8004ad2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800492c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004930:	429a      	cmp	r2, r3
 8004932:	f040 80ce 	bne.w	8004ad2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	f040 80c5 	bne.w	8004ad2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8ce 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
      return;
 800495c:	e0b9      	b.n	8004ad2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800496a:	b29b      	uxth	r3, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80ab 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80a6 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800499e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e4      	bne.n	800498a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	623b      	str	r3, [r7, #32]
   return(result);
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e3      	bne.n	80049c0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0310 	bic.w	r3, r3, #16
 8004a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	69b9      	ldr	r1, [r7, #24]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e4      	bne.n	8004a0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f852 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a54:	e03f      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <HAL_UART_IRQHandler+0x5a8>
 8004a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 ffad 	bl	80059d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a7e:	e02d      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01c      	beq.n	8004ada <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
    }
    return;
 8004aa8:	e017      	b.n	8004ada <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <HAL_UART_IRQHandler+0x604>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fda2 	bl	800560c <UART_EndTransmit_IT>
    return;
 8004ac8:	e008      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
      return;
 8004aca:	bf00      	nop
 8004acc:	e006      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
    return;
 8004ace:	bf00      	nop
 8004ad0:	e004      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
      return;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
      return;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_UART_IRQHandler+0x604>
    return;
 8004ada:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004adc:	37e8      	adds	r7, #232	@ 0xe8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop

08004ae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b14:	b08a      	sub	sp, #40	@ 0x28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4ba5      	ldr	r3, [pc, #660]	@ (8004dd4 <UART_SetConfig+0x2c4>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8004dd8 <UART_SetConfig+0x2c8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a91      	ldr	r2, [pc, #580]	@ (8004ddc <UART_SetConfig+0x2cc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d126      	bne.n	8004be8 <UART_SetConfig+0xd8>
 8004b9a:	4b91      	ldr	r3, [pc, #580]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d81b      	bhi.n	8004be0 <UART_SetConfig+0xd0>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0xa0>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bd1 	.word	0x08004bd1
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e0d6      	b.n	8004d76 <UART_SetConfig+0x266>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e0d2      	b.n	8004d76 <UART_SetConfig+0x266>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e0ce      	b.n	8004d76 <UART_SetConfig+0x266>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e0ca      	b.n	8004d76 <UART_SetConfig+0x266>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be6:	e0c6      	b.n	8004d76 <UART_SetConfig+0x266>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7d      	ldr	r2, [pc, #500]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d138      	bne.n	8004c64 <UART_SetConfig+0x154>
 8004bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d82d      	bhi.n	8004c5c <UART_SetConfig+0x14c>
 8004c00:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <UART_SetConfig+0xf8>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c5d 	.word	0x08004c5d
 8004c14:	08004c5d 	.word	0x08004c5d
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c5d 	.word	0x08004c5d
 8004c20:	08004c5d 	.word	0x08004c5d
 8004c24:	08004c5d 	.word	0x08004c5d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c42:	e098      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c44:	2302      	movs	r3, #2
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e094      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e090      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e08c      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e088      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5f      	ldr	r2, [pc, #380]	@ (8004de8 <UART_SetConfig+0x2d8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d125      	bne.n	8004cba <UART_SetConfig+0x1aa>
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c78:	2b30      	cmp	r3, #48	@ 0x30
 8004c7a:	d016      	beq.n	8004caa <UART_SetConfig+0x19a>
 8004c7c:	2b30      	cmp	r3, #48	@ 0x30
 8004c7e:	d818      	bhi.n	8004cb2 <UART_SetConfig+0x1a2>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d00a      	beq.n	8004c9a <UART_SetConfig+0x18a>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d814      	bhi.n	8004cb2 <UART_SetConfig+0x1a2>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <UART_SetConfig+0x182>
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d008      	beq.n	8004ca2 <UART_SetConfig+0x192>
 8004c90:	e00f      	b.n	8004cb2 <UART_SetConfig+0x1a2>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c98:	e06d      	b.n	8004d76 <UART_SetConfig+0x266>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca0:	e069      	b.n	8004d76 <UART_SetConfig+0x266>
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca8:	e065      	b.n	8004d76 <UART_SetConfig+0x266>
 8004caa:	2308      	movs	r3, #8
 8004cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb0:	e061      	b.n	8004d76 <UART_SetConfig+0x266>
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb8:	e05d      	b.n	8004d76 <UART_SetConfig+0x266>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a4b      	ldr	r2, [pc, #300]	@ (8004dec <UART_SetConfig+0x2dc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d125      	bne.n	8004d10 <UART_SetConfig+0x200>
 8004cc4:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd0:	d016      	beq.n	8004d00 <UART_SetConfig+0x1f0>
 8004cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd4:	d818      	bhi.n	8004d08 <UART_SetConfig+0x1f8>
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d00a      	beq.n	8004cf0 <UART_SetConfig+0x1e0>
 8004cda:	2b80      	cmp	r3, #128	@ 0x80
 8004cdc:	d814      	bhi.n	8004d08 <UART_SetConfig+0x1f8>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART_SetConfig+0x1d8>
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d008      	beq.n	8004cf8 <UART_SetConfig+0x1e8>
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x1f8>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cee:	e042      	b.n	8004d76 <UART_SetConfig+0x266>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf6:	e03e      	b.n	8004d76 <UART_SetConfig+0x266>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfe:	e03a      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d06:	e036      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e032      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a30      	ldr	r2, [pc, #192]	@ (8004dd8 <UART_SetConfig+0x2c8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d12a      	bne.n	8004d70 <UART_SetConfig+0x260>
 8004d1a:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d28:	d01a      	beq.n	8004d60 <UART_SetConfig+0x250>
 8004d2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d2e:	d81b      	bhi.n	8004d68 <UART_SetConfig+0x258>
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d34:	d00c      	beq.n	8004d50 <UART_SetConfig+0x240>
 8004d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d3a:	d815      	bhi.n	8004d68 <UART_SetConfig+0x258>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <UART_SetConfig+0x238>
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d44:	d008      	beq.n	8004d58 <UART_SetConfig+0x248>
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x258>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e012      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e00e      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e00a      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d66:	e006      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6e:	e002      	b.n	8004d76 <UART_SetConfig+0x266>
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <UART_SetConfig+0x2c8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f040 808b 	bne.w	8004e98 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d834      	bhi.n	8004df4 <UART_SetConfig+0x2e4>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0x280>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004df5 	.word	0x08004df5
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004dc3 	.word	0x08004dc3
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004df5 	.word	0x08004df5
 8004dac:	08004df5 	.word	0x08004df5
 8004db0:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fe fe82 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8004db8:	61f8      	str	r0, [r7, #28]
        break;
 8004dba:	e021      	b.n	8004e00 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <UART_SetConfig+0x2e0>)
 8004dbe:	61fb      	str	r3, [r7, #28]
        break;
 8004dc0:	e01e      	b.n	8004e00 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7fe fde3 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8004dc6:	61f8      	str	r0, [r7, #28]
        break;
 8004dc8:	e01a      	b.n	8004e00 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dce:	61fb      	str	r3, [r7, #28]
        break;
 8004dd0:	e016      	b.n	8004e00 <UART_SetConfig+0x2f0>
 8004dd2:	bf00      	nop
 8004dd4:	efff69f3 	.word	0xefff69f3
 8004dd8:	40008000 	.word	0x40008000
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40004400 	.word	0x40004400
 8004de8:	40004800 	.word	0x40004800
 8004dec:	40004c00 	.word	0x40004c00
 8004df0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80fa 	beq.w	8004ffc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d305      	bcc.n	8004e24 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d903      	bls.n	8004e2c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e2a:	e0e7      	b.n	8004ffc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	461c      	mov	r4, r3
 8004e32:	4615      	mov	r5, r2
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	022b      	lsls	r3, r5, #8
 8004e3e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e42:	0222      	lsls	r2, r4, #8
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	0849      	lsrs	r1, r1, #1
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	4688      	mov	r8, r1
 8004e4e:	4681      	mov	r9, r0
 8004e50:	eb12 0a08 	adds.w	sl, r2, r8
 8004e54:	eb43 0b09 	adc.w	fp, r3, r9
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e66:	4650      	mov	r0, sl
 8004e68:	4659      	mov	r1, fp
 8004e6a:	f7fb fa09 	bl	8000280 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4613      	mov	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e7c:	d308      	bcc.n	8004e90 <UART_SetConfig+0x380>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e84:	d204      	bcs.n	8004e90 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e0b5      	b.n	8004ffc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e96:	e0b1      	b.n	8004ffc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea0:	d15d      	bne.n	8004f5e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d827      	bhi.n	8004efa <UART_SetConfig+0x3ea>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <UART_SetConfig+0x3a0>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe fdf2 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61f8      	str	r0, [r7, #28]
        break;
 8004eda:	e014      	b.n	8004f06 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fe04 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	61f8      	str	r0, [r7, #28]
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <UART_SetConfig+0x508>)
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fd4f 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8004eee:	61f8      	str	r0, [r7, #28]
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d077      	beq.n	8004ffc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	005a      	lsls	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	441a      	add	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d916      	bls.n	8004f56 <UART_SetConfig+0x446>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2e:	d212      	bcs.n	8004f56 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e052      	b.n	8004ffc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f5c:	e04e      	b.n	8004ffc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d827      	bhi.n	8004fb6 <UART_SetConfig+0x4a6>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <UART_SetConfig+0x45c>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb7 	.word	0x08004fb7
 8004f7c:	08004fa7 	.word	0x08004fa7
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fb7 	.word	0x08004fb7
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fe fd94 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8004f94:	61f8      	str	r0, [r7, #28]
        break;
 8004f96:	e014      	b.n	8004fc2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fe fda6 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61f8      	str	r0, [r7, #28]
        break;
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005018 <UART_SetConfig+0x508>)
 8004fa2:	61fb      	str	r3, [r7, #28]
        break;
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fe fcf1 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
        break;
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e005      	b.n	8004fc2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d019      	beq.n	8004ffc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	085a      	lsrs	r2, r3, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d909      	bls.n	8004ff6 <UART_SetConfig+0x4e6>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d205      	bcs.n	8004ff6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	e002      	b.n	8004ffc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005008:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800500c:	4618      	mov	r0, r3
 800500e:	3728      	adds	r7, #40	@ 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005016:	bf00      	nop
 8005018:	00f42400 	.word	0x00f42400

0800501c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01a      	beq.n	8005132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d10a      	bne.n	8005132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b098      	sub	sp, #96	@ 0x60
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005170:	f7fb feaa 	bl	8000ec8 <HAL_GetTick>
 8005174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d12e      	bne.n	80051e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88c 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d021      	beq.n	80051e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e062      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d149      	bne.n	8005284 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f856 	bl	80052b0 <UART_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	623b      	str	r3, [r7, #32]
   return(result);
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
 800522a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60fb      	str	r3, [r7, #12]
   return(result);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	617b      	str	r3, [r7, #20]
   return(result);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e011      	b.n	80052a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3758      	adds	r7, #88	@ 0x58
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	e04f      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d04b      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fb fdfd 	bl	8000ec8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e04e      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d037      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	d034      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d031      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d110      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f8ff 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2208      	movs	r2, #8
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e029      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d111      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8e5 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d0a0      	beq.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b097      	sub	sp, #92	@ 0x5c
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053be:	d10e      	bne.n	80053de <UART_Start_Receive_IT+0x52>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <UART_Start_Receive_IT+0x48>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053d2:	e02d      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22ff      	movs	r2, #255	@ 0xff
 80053d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053dc:	e028      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10d      	bne.n	8005402 <UART_Start_Receive_IT+0x76>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <UART_Start_Receive_IT+0x6c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	@ 0xff
 80053f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053f6:	e01b      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	227f      	movs	r2, #127	@ 0x7f
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005400:	e016      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800540a:	d10d      	bne.n	8005428 <UART_Start_Receive_IT+0x9c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <UART_Start_Receive_IT+0x92>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	227f      	movs	r2, #127	@ 0x7f
 8005418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800541c:	e008      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	223f      	movs	r2, #63	@ 0x3f
 8005422:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005426:	e003      	b.n	8005430 <UART_Start_Receive_IT+0xa4>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2222      	movs	r2, #34	@ 0x22
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3308      	adds	r3, #8
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	657b      	str	r3, [r7, #84]	@ 0x54
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005460:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005462:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800546e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547c:	d107      	bne.n	800548e <UART_Start_Receive_IT+0x102>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <UART_Start_Receive_IT+0x184>)
 800548a:	669a      	str	r2, [r3, #104]	@ 0x68
 800548c:	e002      	b.n	8005494 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <UART_Start_Receive_IT+0x188>)
 8005492:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d019      	beq.n	80054d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80054b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80054bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_Start_Receive_IT+0x110>
 80054ce:	e018      	b.n	8005502 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	613b      	str	r3, [r7, #16]
   return(result);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f043 0320 	orr.w	r3, r3, #32
 80054e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69f9      	ldr	r1, [r7, #28]
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	375c      	adds	r7, #92	@ 0x5c
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	0800581d 	.word	0x0800581d
 8005514:	08005661 	.word	0x08005661

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b095      	sub	sp, #84	@ 0x54
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005540:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	61fb      	str	r3, [r7, #28]
   return(result);
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800558a:	2b01      	cmp	r3, #1
 800558c:	d118      	bne.n	80055c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60bb      	str	r3, [r7, #8]
   return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055d4:	bf00      	nop
 80055d6:	3754      	adds	r7, #84	@ 0x54
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7fb f98e 	bl	8000920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fa46 	bl	8004ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b09c      	sub	sp, #112	@ 0x70
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800566e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005678:	2b22      	cmp	r3, #34	@ 0x22
 800567a:	f040 80be 	bne.w	80057fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005692:	b2da      	uxtb	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	400a      	ands	r2, r1
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 80a3 	bne.w	800580e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	667b      	str	r3, [r7, #100]	@ 0x64
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800571a:	647a      	str	r2, [r7, #68]	@ 0x44
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e5      	bne.n	80056fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a34      	ldr	r2, [pc, #208]	@ (8005818 <UART_RxISR_8BIT+0x1b8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01f      	beq.n	800578c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	623b      	str	r3, [r7, #32]
   return(result);
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800576e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30
 800577a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	2b01      	cmp	r3, #1
 8005792:	d12e      	bne.n	80057f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	617b      	str	r3, [r7, #20]
   return(result);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d103      	bne.n	80057e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2210      	movs	r2, #16
 80057e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff f984 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057f0:	e00d      	b.n	800580e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb f874 	bl	80008e0 <HAL_UART_RxCpltCallback>
}
 80057f8:	e009      	b.n	800580e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	8b1b      	ldrh	r3, [r3, #24]
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	b292      	uxth	r2, r2
 800580c:	831a      	strh	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	3770      	adds	r7, #112	@ 0x70
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40008000 	.word	0x40008000

0800581c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b09c      	sub	sp, #112	@ 0x70
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800582a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005834:	2b22      	cmp	r3, #34	@ 0x22
 8005836:	f040 80be 	bne.w	80059b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005840:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005848:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800584a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800584e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005852:	4013      	ands	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005858:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 80a3 	bne.w	80059ca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80058a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e6      	bne.n	8005884 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a34      	ldr	r2, [pc, #208]	@ (80059d4 <UART_RxISR_16BIT+0x1b8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01f      	beq.n	8005948 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	61fb      	str	r3, [r7, #28]
   return(result);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800592a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005936:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594c:	2b01      	cmp	r3, #1
 800594e:	d12e      	bne.n	80059ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d103      	bne.n	800599e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2210      	movs	r2, #16
 800599c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff f8a6 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ac:	e00d      	b.n	80059ca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fa ff96 	bl	80008e0 <HAL_UART_RxCpltCallback>
}
 80059b4:	e009      	b.n	80059ca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	8b1b      	ldrh	r3, [r3, #24]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	b292      	uxth	r2, r2
 80059c8:	831a      	strh	r2, [r3, #24]
}
 80059ca:	bf00      	nop
 80059cc:	3770      	adds	r7, #112	@ 0x70
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40008000 	.word	0x40008000

080059d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <NewLoRa>:
 * - 모든 포인터 및 설정 필드를 명시적으로 비활성화 상태로 초기화함
 * - 이후 ConfigureLoRaHardware(), ApplyLoRaParameters()로 실제 설정 적용 필요
 *
 * @return 초기화된 E220 구조체 (주소/채널/통신 설정은 아직 적용되지 않음)
 */
E220 NewLoRa(void) {
 80059ec:	b4b0      	push	{r4, r5, r7}
 80059ee:	b093      	sub	sp, #76	@ 0x4c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    E220 lora;
    // ------------------------------[ 하드웨어 연결 필드 초기화 ]------------------------------ //
    lora.pHuart = NULL;          ///< UART 포인터 초기화 (연결 안됨)
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]
    lora.M0Port = NULL;          ///< M0 제어 핀 포트 미설정
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
    lora.M0Pin  = 0;             ///< M0 핀 번호 미설정
 80059fc:	2300      	movs	r3, #0
 80059fe:	823b      	strh	r3, [r7, #16]
    lora.M1Port = NULL;          ///< M1 제어 핀 포트 미설정
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
    lora.M1Pin  = 0;             ///< M1 핀 번호 미설정
 8005a04:	2300      	movs	r3, #0
 8005a06:	833b      	strh	r3, [r7, #24]
    // ------------------------------[ 기타 필드 ]------------------------------ //
    lora.current_mode = -1;                 ///< 아직 모드 설정 안 됨
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    lora.moduleType   = MODULE_TYPE_E220;   ///< 기본 모듈 타입 설정
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

    return lora;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	461d      	mov	r5, r3
 8005a18:	f107 0408 	add.w	r4, r7, #8
 8005a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	374c      	adds	r7, #76	@ 0x4c
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bcb0      	pop	{r4, r5, r7}
 8005a38:	4770      	bx	lr

08005a3a <E220LoRaEnterNormalMode>:
    HAL_GPIO_WritePin(lora->M0Port, lora->M0Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lora->M1Port, lora->M1Pin, GPIO_PIN_SET);
    HAL_Delay(100);  // 안정화 대기
}

void E220LoRaEnterNormalMode(E220 *lora) {
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(lora->M0Port, lora->M0Pin, GPIO_PIN_RESET);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6858      	ldr	r0, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	891b      	ldrh	r3, [r3, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7fd fa0d 	bl	8002e6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lora->M1Port, lora->M1Pin, GPIO_PIN_RESET);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68d8      	ldr	r0, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8a1b      	ldrh	r3, [r3, #16]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f7fd fa05 	bl	8002e6c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8005a62:	2064      	movs	r0, #100	@ 0x64
 8005a64:	f7fb fa3c 	bl	8000ee0 <HAL_Delay>
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <InitLoRaModule>:
}

/**
 * @brief 최상위 LoRa 모듈 초기화 함수
 */
void InitLoRaModule(void) {
 8005a70:	b5b0      	push	{r4, r5, r7, lr}
 8005a72:	b090      	sub	sp, #64	@ 0x40
 8005a74:	af00      	add	r7, sp, #0
    // [1] LoRa 구조체 기본 초기화
    myLoRa = NewLoRa();
 8005a76:	4c16      	ldr	r4, [pc, #88]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005a78:	463b      	mov	r3, r7
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff ffb6 	bl	80059ec <NewLoRa>
 8005a80:	4625      	mov	r5, r4
 8005a82:	463c      	mov	r4, r7
 8005a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    // [2] 하드웨어 핀 설정
    myLoRa.pHuart = &huart3;
 8005a98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad4 <InitLoRaModule+0x64>)
 8005a9c:	601a      	str	r2, [r3, #0]
    myLoRa.M0Port = LORA_GPIO_PORT_M0;
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad8 <InitLoRaModule+0x68>)
 8005aa2:	605a      	str	r2, [r3, #4]
    myLoRa.M0Pin  = LORA_GPIO_PIN_M0;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	811a      	strh	r2, [r3, #8]
    myLoRa.M1Port = LORA_GPIO_PORT_M1;
 8005aaa:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005aac:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8005ab0:	60da      	str	r2, [r3, #12]
    myLoRa.M1Pin  = LORA_GPIO_PIN_M1;
 8005ab2:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ab8:	821a      	strh	r2, [r3, #16]
    myLoRa.moduleType = E220_LORA_MODULE_TYPE;
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    // [3] 수동 설정 기반으로 RF 세팅은 생략 (RF Tool로 설정 예정)

    // [4] Normal 모드 전환
    E220LoRaEnterNormalMode(&myLoRa);   // M0=0, M1=0
 8005ac2:	4803      	ldr	r0, [pc, #12]	@ (8005ad0 <InitLoRaModule+0x60>)
 8005ac4:	f7ff ffb9 	bl	8005a3a <E220LoRaEnterNormalMode>
}
 8005ac8:	bf00      	nop
 8005aca:	3740      	adds	r7, #64	@ 0x40
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad0:	2000024c 	.word	0x2000024c
 8005ad4:	20000178 	.word	0x20000178
 8005ad8:	48000400 	.word	0x48000400

08005adc <LoRaSetMode>:
 * @details
 * - 모듈 타입(E220 또는 E22)에 맞춰 내부적으로 M0/M1 핀 상태를 계산
 * - 핀 상태 설정 후, 안정적인 모드 전환을 위해 1초 지연을 줌
 * - 현재 모드 상태를 구조체에 기록하고, 디버깅 로그 출력
 */
void LoRaSetMode(E220 *lora, LoRaMode_t mode) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
    /* ------------------------------------------------------------------------
     * [1] M0/M1 핀 상태 계산
     * - 모듈 타입에 따라 지정된 모드에 대한 핀 상태 결정
     * ------------------------------------------------------------------------ */
    GPIO_PinState m0 = GPIO_PIN_RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState m1 = GPIO_PIN_RESET;
 8005aec:	2300      	movs	r3, #0
 8005aee:	73bb      	strb	r3, [r7, #14]
    /* ------------------------------------------------------------------------
     * [2] M0/M1 핀 상태 설정
     * - 해당 핀 포트/핀 넘버는 lora 구조체에 사전 설정되어 있어야 함
     * ------------------------------------------------------------------------ */
    HAL_GPIO_WritePin(lora->M0Port, lora->M0Pin, m0);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6858      	ldr	r0, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	891b      	ldrh	r3, [r3, #8]
 8005af8:	7bfa      	ldrb	r2, [r7, #15]
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7fd f9b6 	bl	8002e6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lora->M1Port, lora->M1Pin, m1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68d8      	ldr	r0, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8a1b      	ldrh	r3, [r3, #16]
 8005b08:	7bba      	ldrb	r2, [r7, #14]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f7fd f9ae 	bl	8002e6c <HAL_GPIO_WritePin>
    /* ------------------------------------------------------------------------
     * [3] 안정적인 모드 전환을 위한 지연
     * - 데이터시트 기준: 모드 전환 후 최소 수백 ms 대기 권장
     * ------------------------------------------------------------------------ */
    HAL_Delay(1000);  // 1초 지연 (권장값 또는 안정성 고려)
 8005b10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b14:	f7fb f9e4 	bl	8000ee0 <HAL_Delay>
    /* ------------------------------------------------------------------------
     * [4] 현재 모드 저장
     * ------------------------------------------------------------------------ */
    lora->current_mode = mode;
 8005b18:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <iE220LoRaMakePacket>:
 * @details
 *   - 앞 3바이트는 수신자 주소(High, Low, Channel)
 *   - 그 뒤는 payload (EEA 패킷 등)
 */
int iE220LoRaMakePacket(const uint8_t *uchDstID, const uint8_t *uchData,
                        int iDataLength, uint8_t *uchPaket) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
    // --------------------[ 1. 목적지 주소 3바이트 삽입 ]-------------------- //
    uchPaket[0] = uchDstID[0];  ///< ADDH
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	701a      	strb	r2, [r3, #0]
    uchPaket[1] = uchDstID[1];  ///< ADDL
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	701a      	strb	r2, [r3, #0]
    uchPaket[2] = uchDstID[2];  ///< CHAN
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3302      	adds	r3, #2
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	701a      	strb	r2, [r3, #0]
    // --------------------[ 2. 데이터 복사 ]-------------------- //
    memcpy(&uchPaket[3], uchData, iDataLength);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	3303      	adds	r3, #3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f83b 	bl	8006bda <memcpy>
    // --------------------[ 3. 전체 패킷 길이 반환 ]-------------------- //
    return 3 + iDataLength;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3303      	adds	r3, #3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <E220LoRaSendPacket>:
/**
 * @brief LoRa 패킷 송신
 */
void E220LoRaSendPacket(E220 *lora, uint8_t *buffer, size_t len) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
    /* ------------------------------------------------------------------------
     * [1] 현재 모드가 NORMAL이 아니면 NORMAL 모드로 전환
     * - 전환 후 안정화를 위해 200ms 지연
     * ------------------------------------------------------------------------ */
    if (lora->current_mode != LORA_MODE_NORMAL) {
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <E220LoRaSendPacket+0x22>
        LoRaSetMode(lora, LORA_MODE_NORMAL);  // M0/M1 핀 설정
 8005b84:	2100      	movs	r1, #0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ffa8 	bl	8005adc <LoRaSetMode>
        HAL_Delay(200);                       // 모드 전환 안정화 시간
 8005b8c:	20c8      	movs	r0, #200	@ 0xc8
 8005b8e:	f7fb f9a7 	bl	8000ee0 <HAL_Delay>
    }
    /* ------------------------------------------------------------------------
     * [2] UART를 통해 패킷 송신
     * - HAL_MAX_DELAY: 블로킹 방식으로 전송 완료 대기
     * ------------------------------------------------------------------------ */
    HAL_UART_Transmit(lora->pHuart, buffer, len, HAL_MAX_DELAY);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f7fe fbc4 	bl	800432c <HAL_UART_Transmit>
    /* ------------------------------------------------------------------------
     * [3] 송신 직후 추가 안정화 지연
     * - 수신기에서 패킷 처리 완료 전 모드 전환 등 방지
     * ------------------------------------------------------------------------ */
    HAL_Delay(150);  // 전송 안정화 지연
 8005ba4:	2096      	movs	r0, #150	@ 0x96
 8005ba6:	f7fb f99b 	bl	8000ee0 <HAL_Delay>
}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <SetLoRaDestination>:
 */
E220* GetLoRaInstance(void) {
	return &myLoRa;
}

void SetLoRaDestination(uint16_t addr) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
	    gDstInfo[0] = 0x00;
 8005bbe:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <SetLoRaDestination+0x28>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
	    gDstInfo[1] = EEA_RTU_ID;
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <SetLoRaDestination+0x28>)
 8005bc6:	22fa      	movs	r2, #250	@ 0xfa
 8005bc8:	705a      	strb	r2, [r3, #1]
	    gDstInfo[2] = CHANNEL_ID;
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <SetLoRaDestination+0x28>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	709a      	strb	r2, [r3, #2]
	}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	20000034 	.word	0x20000034

08005be0 <ProcessLoRaReception>:
 * @brief LoRa 수신 큐에서 패킷 추출 및 처리
 * @details
 * - Fixed Mode(3바이트 헤더) 기반 패킷 파싱
 * - 유효한 EEA 패킷을 역직렬화 후 명령어 처리 함수로 전달
 */
void ProcessLoRaReception(void) {
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
   static bool inPacket = false;
   static uint8_t tempBuf[EEA_MAX_PACKET_SIZE];
   static uint16_t tempIndex = 0;
   static uint32_t stxStartTime = 0;

   while (!bIsQueueEmpty(&rxQueue)) {
 8005be6:	e0ef      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
      element byte;
      bDequeue(&rxQueue, &byte);
 8005be8:	f107 0313 	add.w	r3, r7, #19
 8005bec:	4619      	mov	r1, r3
 8005bee:	487e      	ldr	r0, [pc, #504]	@ (8005de8 <ProcessLoRaReception+0x208>)
 8005bf0:	f000 fa7b 	bl	80060ea <bDequeue>

      // [1] 타임아웃 검사
      if (inPacket && (HAL_GetTick() - stxStartTime > 10)) {
 8005bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <ProcessLoRaReception+0x3a>
 8005bfc:	f7fb f964 	bl	8000ec8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	4b7b      	ldr	r3, [pc, #492]	@ (8005df0 <ProcessLoRaReception+0x210>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b0a      	cmp	r3, #10
 8005c0a:	d906      	bls.n	8005c1a <ProcessLoRaReception+0x3a>
         inPacket = false;
 8005c0c:	4b77      	ldr	r3, [pc, #476]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
         tempIndex = 0;
 8005c12:	4b78      	ldr	r3, [pc, #480]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	801a      	strh	r2, [r3, #0]
         continue;
 8005c18:	e0d6      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
      }

      // [2] STX 수신 대기
      if (!inPacket) {
 8005c1a:	4b74      	ldr	r3, [pc, #464]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f083 0301 	eor.w	r3, r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <ProcessLoRaReception+0x6e>
         if (byte == EEA_STX) {
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c2c:	f040 80cb 	bne.w	8005dc6 <ProcessLoRaReception+0x1e6>
            inPacket = true;
 8005c30:	4b6e      	ldr	r3, [pc, #440]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
            tempBuf[0] = byte;
 8005c36:	7cfa      	ldrb	r2, [r7, #19]
 8005c38:	4b6f      	ldr	r3, [pc, #444]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005c3a:	701a      	strb	r2, [r3, #0]
            tempIndex = 1;
 8005c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	801a      	strh	r2, [r3, #0]
            stxStartTime = HAL_GetTick();
 8005c42:	f7fb f941 	bl	8000ec8 <HAL_GetTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a69      	ldr	r2, [pc, #420]	@ (8005df0 <ProcessLoRaReception+0x210>)
 8005c4a:	6013      	str	r3, [r2, #0]
         }
         continue;
 8005c4c:	e0bb      	b.n	8005dc6 <ProcessLoRaReception+0x1e6>
      }

      // [3] 수신 중: 바이트 누적
      tempBuf[tempIndex++] = byte;
 8005c4e:	4b69      	ldr	r3, [pc, #420]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	b291      	uxth	r1, r2
 8005c56:	4a67      	ldr	r2, [pc, #412]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c58:	8011      	strh	r1, [r2, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	7cf9      	ldrb	r1, [r7, #19]
 8005c5e:	4b66      	ldr	r3, [pc, #408]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005c60:	5499      	strb	r1, [r3, r2]

      // [4] 버퍼 초과 방지
      if (tempIndex >= EEA_MAX_PACKET_SIZE) {
 8005c62:	4b64      	ldr	r3, [pc, #400]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d906      	bls.n	8005c78 <ProcessLoRaReception+0x98>
         inPacket = false;
 8005c6a:	4b60      	ldr	r3, [pc, #384]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
         tempIndex = 0;
 8005c70:	4b60      	ldr	r3, [pc, #384]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	801a      	strh	r2, [r3, #0]
         continue;
 8005c76:	e0a7      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
      }

      // [5] 최소 길이 도달 후 LEN 추출
      if (tempIndex >= 6) {
 8005c78:	4b5e      	ldr	r3, [pc, #376]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	f240 80a3 	bls.w	8005dc8 <ProcessLoRaReception+0x1e8>
         uint8_t payloadLen = tempBuf[5];
 8005c82:	4b5d      	ldr	r3, [pc, #372]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005c84:	795b      	ldrb	r3, [r3, #5]
 8005c86:	75fb      	strb	r3, [r7, #23]
         if (payloadLen > EEA_MAX_DATA_SIZE) {
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d906      	bls.n	8005c9c <ProcessLoRaReception+0xbc>
            // 잘못된 길이 → 초기화
            inPacket = false;
 8005c8e:	4b57      	ldr	r3, [pc, #348]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
            tempIndex = 0;
 8005c94:	4b57      	ldr	r3, [pc, #348]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	801a      	strh	r2, [r3, #0]
            continue;
 8005c9a:	e095      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
         }

         uint8_t totalLen = 6 + payloadLen + 2;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	75bb      	strb	r3, [r7, #22]

         // [6] ETX 수신 && 길이 일치 시 패킷 처리
         if (byte == EEA_ETX && tempIndex == totalLen) {
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	2bef      	cmp	r3, #239	@ 0xef
 8005ca6:	d17e      	bne.n	8005da6 <ProcessLoRaReception+0x1c6>
 8005ca8:	7dbb      	ldrb	r3, [r7, #22]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	4b51      	ldr	r3, [pc, #324]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d178      	bne.n	8005da6 <ProcessLoRaReception+0x1c6>
            inPacket = false;
 8005cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]

            uint8_t calcChecksum = CalculateChecksum(tempBuf,
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	3306      	adds	r3, #6
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	484d      	ldr	r0, [pc, #308]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cc4:	f000 fc0c 	bl	80064e0 <CalculateChecksum>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	757b      	strb	r3, [r7, #21]
                  6 + payloadLen);
            uint8_t recvChecksum = tempBuf[6 + payloadLen];
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	3306      	adds	r3, #6
 8005cd0:	4a49      	ldr	r2, [pc, #292]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	753b      	strb	r3, [r7, #20]

            if (recvChecksum == calcChecksum) {
 8005cd6:	7d3a      	ldrb	r2, [r7, #20]
 8005cd8:	7d7b      	ldrb	r3, [r7, #21]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d15f      	bne.n	8005d9e <ProcessLoRaReception+0x1be>
               EEAPacket_t pkt = { .stx = tempBuf[0], .srcId = tempBuf[1],
 8005cde:	463b      	mov	r3, r7
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	60da      	str	r2, [r3, #12]
 8005cea:	4b43      	ldr	r3, [pc, #268]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	703b      	strb	r3, [r7, #0]
 8005cf0:	4b41      	ldr	r3, [pc, #260]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	707b      	strb	r3, [r7, #1]
                     .dstId = tempBuf[2], .blockId = tempBuf[3],
 8005cf6:	4b40      	ldr	r3, [pc, #256]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cf8:	789b      	ldrb	r3, [r3, #2]
               EEAPacket_t pkt = { .stx = tempBuf[0], .srcId = tempBuf[1],
 8005cfa:	70bb      	strb	r3, [r7, #2]
                     .dstId = tempBuf[2], .blockId = tempBuf[3],
 8005cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005cfe:	78db      	ldrb	r3, [r3, #3]
               EEAPacket_t pkt = { .stx = tempBuf[0], .srcId = tempBuf[1],
 8005d00:	70fb      	strb	r3, [r7, #3]
                     .command = tempBuf[4], .length = payloadLen,
 8005d02:	4b3d      	ldr	r3, [pc, #244]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005d04:	791b      	ldrb	r3, [r3, #4]
               EEAPacket_t pkt = { .stx = tempBuf[0], .srcId = tempBuf[1],
 8005d06:	713b      	strb	r3, [r7, #4]
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	717b      	strb	r3, [r7, #5]
 8005d0c:	7d3b      	ldrb	r3, [r7, #20]
 8005d0e:	73bb      	strb	r3, [r7, #14]
                     .checksum = recvChecksum, .etx = tempBuf[6
                           + payloadLen + 1] };
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	3307      	adds	r3, #7
                     .checksum = recvChecksum, .etx = tempBuf[6
 8005d14:	4a38      	ldr	r2, [pc, #224]	@ (8005df8 <ProcessLoRaReception+0x218>)
 8005d16:	5cd3      	ldrb	r3, [r2, r3]
               EEAPacket_t pkt = { .stx = tempBuf[0], .srcId = tempBuf[1],
 8005d18:	73fb      	strb	r3, [r7, #15]
               memcpy(pkt.data, &tempBuf[6], payloadLen);
 8005d1a:	7dfa      	ldrb	r2, [r7, #23]
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	3306      	adds	r3, #6
 8005d20:	4936      	ldr	r1, [pc, #216]	@ (8005dfc <ProcessLoRaReception+0x21c>)
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 ff59 	bl	8006bda <memcpy>

               // 유효 ID 확인
               if ((pkt.dstId == EEA_M_ID || pkt.dstId == 0xFF)
 8005d28:	78bb      	ldrb	r3, [r7, #2]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d002      	beq.n	8005d34 <ProcessLoRaReception+0x154>
 8005d2e:	78bb      	ldrb	r3, [r7, #2]
 8005d30:	2bff      	cmp	r3, #255	@ 0xff
 8005d32:	d134      	bne.n	8005d9e <ProcessLoRaReception+0x1be>
                     && pkt.srcId == EEA_RTU_ID) {
 8005d34:	787b      	ldrb	r3, [r7, #1]
 8005d36:	2bfa      	cmp	r3, #250	@ 0xfa
 8005d38:	d131      	bne.n	8005d9e <ProcessLoRaReception+0x1be>

                  memcpy((void*) (volatile void*) &latestRxPacket, &pkt,
 8005d3a:	4b31      	ldr	r3, [pc, #196]	@ (8005e00 <ProcessLoRaReception+0x220>)
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	463c      	mov	r4, r7
 8005d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d42:	6028      	str	r0, [r5, #0]
 8005d44:	6069      	str	r1, [r5, #4]
 8005d46:	60aa      	str	r2, [r5, #8]
 8005d48:	60eb      	str	r3, [r5, #12]
                        sizeof(EEAPacket_t));
                  rxPacketCount++;
 8005d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005e04 <ProcessLoRaReception+0x224>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	4a2c      	ldr	r2, [pc, #176]	@ (8005e04 <ProcessLoRaReception+0x224>)
 8005d52:	6013      	str	r3, [r2, #0]
                  SetLoRaDestination(pkt.srcId);
 8005d54:	787b      	ldrb	r3, [r7, #1]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff2c 	bl	8005bb4 <SetLoRaDestination>

                  // 명령 처리
                  switch (pkt.command) {
 8005d5c:	793b      	ldrb	r3, [r7, #4]
 8005d5e:	2ba1      	cmp	r3, #161	@ 0xa1
 8005d60:	d012      	beq.n	8005d88 <ProcessLoRaReception+0x1a8>
 8005d62:	2ba1      	cmp	r3, #161	@ 0xa1
 8005d64:	dc18      	bgt.n	8005d98 <ProcessLoRaReception+0x1b8>
 8005d66:	2b64      	cmp	r3, #100	@ 0x64
 8005d68:	d018      	beq.n	8005d9c <ProcessLoRaReception+0x1bc>
 8005d6a:	2b64      	cmp	r3, #100	@ 0x64
 8005d6c:	dc14      	bgt.n	8005d98 <ProcessLoRaReception+0x1b8>
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d002      	beq.n	8005d78 <ProcessLoRaReception+0x198>
 8005d72:	2b1a      	cmp	r3, #26
 8005d74:	d012      	beq.n	8005d9c <ProcessLoRaReception+0x1bc>
                  case CMD_LED_FAULT_RES:
                  case CMD_PIR_OFF_DELAY_RES:
                     break;

                  default:
                     break;
 8005d76:	e00f      	b.n	8005d98 <ProcessLoRaReception+0x1b8>
                     LedControlCommand(pkt.data, pkt.length);
 8005d78:	797a      	ldrb	r2, [r7, #5]
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	3306      	adds	r3, #6
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fd47 	bl	8006814 <LedControlCommand>
                     break;
 8005d86:	e00a      	b.n	8005d9e <ProcessLoRaReception+0x1be>
                     PirDelayCommand(pkt.data, pkt.length, pkt.srcId);
 8005d88:	7979      	ldrb	r1, [r7, #5]
 8005d8a:	787a      	ldrb	r2, [r7, #1]
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	3306      	adds	r3, #6
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fd17 	bl	80067c4 <PirDelayCommand>
                     break;
 8005d96:	e002      	b.n	8005d9e <ProcessLoRaReception+0x1be>
                     break;
 8005d98:	bf00      	nop
 8005d9a:	e000      	b.n	8005d9e <ProcessLoRaReception+0x1be>
                     break;
 8005d9c:	bf00      	nop
                  }
               }
            }

            // regardless of result
            tempIndex = 0;
 8005d9e:	4b15      	ldr	r3, [pc, #84]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	801a      	strh	r2, [r3, #0]
            continue;
 8005da4:	e010      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
         }

         // [7] ETX가 왔지만 길이 부족 → 폐기
         if (byte == EEA_ETX && tempIndex < totalLen) {
 8005da6:	7cfb      	ldrb	r3, [r7, #19]
 8005da8:	2bef      	cmp	r3, #239	@ 0xef
 8005daa:	d10d      	bne.n	8005dc8 <ProcessLoRaReception+0x1e8>
 8005dac:	7dbb      	ldrb	r3, [r7, #22]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d907      	bls.n	8005dc8 <ProcessLoRaReception+0x1e8>
            inPacket = false;
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <ProcessLoRaReception+0x20c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
            tempIndex = 0;
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <ProcessLoRaReception+0x214>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	801a      	strh	r2, [r3, #0]
            continue;
 8005dc4:	e000      	b.n	8005dc8 <ProcessLoRaReception+0x1e8>
         continue;
 8005dc6:	bf00      	nop
   while (!bIsQueueEmpty(&rxQueue)) {
 8005dc8:	4807      	ldr	r0, [pc, #28]	@ (8005de8 <ProcessLoRaReception+0x208>)
 8005dca:	f000 f93a 	bl	8006042 <bIsQueueEmpty>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f af06 	bne.w	8005be8 <ProcessLoRaReception+0x8>
         }
      }
   }
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bdb0      	pop	{r4, r5, r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000140 	.word	0x20000140
 8005dec:	20000290 	.word	0x20000290
 8005df0:	20000294 	.word	0x20000294
 8005df4:	20000298 	.word	0x20000298
 8005df8:	2000029c 	.word	0x2000029c
 8005dfc:	200002a2 	.word	0x200002a2
 8005e00:	20000164 	.word	0x20000164
 8005e04:	2000028c 	.word	0x2000028c

08005e08 <SerializeEEAPacket>:
 * @brief EEAPacket_t 구조체를 직렬화하여 바이트 배열로 변환
 * @param dest 변환된 바이트 배열을 저장할 버퍼 포인터
 * @param pkt 직렬화할 EEA 패킷 구조체 포인터
 * @return 직렬화된 전체 바이트 길이
 */
int SerializeEEAPacket(uint8_t *dest, const EEAPacket_t *pkt) {
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
	int index = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
	dest[index++] = pkt->stx;       ///< 패킷 시작 바이트 (0x02)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	60fa      	str	r2, [r7, #12]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->srcId;     ///< 송신자 ID
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	7852      	ldrb	r2, [r2, #1]
 8005e38:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->dstId;     ///< 수신자 ID
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	60fa      	str	r2, [r7, #12]
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7892      	ldrb	r2, [r2, #2]
 8005e4a:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->blockId;   ///< 블록 ID (센서 등)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	60fa      	str	r2, [r7, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4413      	add	r3, r2
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	78d2      	ldrb	r2, [r2, #3]
 8005e5c:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->command;   ///< 명령어
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	7912      	ldrb	r2, [r2, #4]
 8005e6e:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->length;    ///< 데이터 길이
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	60fa      	str	r2, [r7, #12]
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	7952      	ldrb	r2, [r2, #5]
 8005e80:	701a      	strb	r2, [r3, #0]

	///< 데이터 필드 복사
	for (int i = 0; i < pkt->length; i++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	e00e      	b.n	8005ea6 <SerializeEEAPacket+0x9e>
		dest[index++] = pkt->data[i]; ///< 각 데이터 바이트 복사
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	60fa      	str	r2, [r7, #12]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	440a      	add	r2, r1
 8005e9a:	3206      	adds	r2, #6
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < pkt->length; i++) {
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	795b      	ldrb	r3, [r3, #5]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	dbea      	blt.n	8005e88 <SerializeEEAPacket+0x80>
	}

	dest[index++] = pkt->checksum;  ///< 체크섬
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	60fa      	str	r2, [r7, #12]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7b92      	ldrb	r2, [r2, #14]
 8005ec2:	701a      	strb	r2, [r3, #0]
	dest[index++] = pkt->etx;       ///< 패킷 종료 바이트 (0x03)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	60fa      	str	r2, [r7, #12]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4413      	add	r3, r2
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	7bd2      	ldrb	r2, [r2, #15]
 8005ed4:	701a      	strb	r2, [r3, #0]

	return index; ///< 전체 직렬화된 바이트 수 반환
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <GetPage>:
#include "Flash.h"
#include <stdint.h>

// 페이지 주소 계산 (HAL의 FLASH_PAGE_SIZE 사용)
static uint32_t GetPage(uint32_t Addr) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
    return ((Addr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8005ef2:	0adb      	lsrs	r3, r3, #11
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <SaveFaultStatus>:

HAL_StatusTypeDef SaveFaultStatus(uint32_t status) {
 8005f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f04:	b08a      	sub	sp, #40	@ 0x28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8005f0a:	f7fc fc13 	bl	8002734 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005f0e:	4b27      	ldr	r3, [pc, #156]	@ (8005fac <SaveFaultStatus+0xac>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	4a26      	ldr	r2, [pc, #152]	@ (8005fac <SaveFaultStatus+0xac>)
 8005f14:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f18:	6193      	str	r3, [r2, #24]
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <SaveFaultStatus+0xac>)
 8005f1c:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8005f20:	611a      	str	r2, [r3, #16]

    FLASH_EraseInitTypeDef erase = {
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .Page = GetPage(FLASH_USER_START_ADDR),
 8005f2a:	4821      	ldr	r0, [pc, #132]	@ (8005fb0 <SaveFaultStatus+0xb0>)
 8005f2c:	f7ff ffda 	bl	8005ee4 <GetPage>
 8005f30:	4603      	mov	r3, r0
    FLASH_EraseInitTypeDef erase = {
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	2301      	movs	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
        .NbPages = 1,
        .Banks = FLASH_BANK_1  // 단일 뱅크 설정
    };

    uint32_t PageError;
    if (HAL_FLASHEx_Erase(&erase, &PageError) != HAL_OK) {
 8005f38:	f107 020c 	add.w	r2, r7, #12
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fc fcda 	bl	80028fc <HAL_FLASHEx_Erase>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <SaveFaultStatus+0x56>
        HAL_FLASH_Lock();
 8005f4e:	f7fc fc13 	bl	8002778 <HAL_FLASH_Lock>
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e024      	b.n	8005fa0 <SaveFaultStatus+0xa0>
    }

    // 64비트 데이터 무결성 저장
    uint64_t data = (uint64_t)status | ((uint64_t)(~status) << 32);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	2200      	movs	r2, #0
 8005f64:	469a      	mov	sl, r3
 8005f66:	4693      	mov	fp, r2
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	4653      	mov	r3, sl
 8005f72:	2200      	movs	r2, #0
 8005f74:	ea44 0802 	orr.w	r8, r4, r2
 8005f78:	ea45 0903 	orr.w	r9, r5, r3
 8005f7c:	e9c7 8908 	strd	r8, r9, [r7, #32]

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8005f80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f84:	490a      	ldr	r1, [pc, #40]	@ (8005fb0 <SaveFaultStatus+0xb0>)
 8005f86:	2000      	movs	r0, #0
 8005f88:	f7fc fb68 	bl	800265c <HAL_FLASH_Program>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <SaveFaultStatus+0x9a>
                          FLASH_USER_START_ADDR,
                          data) != HAL_OK) {
        HAL_FLASH_Lock();
 8005f92:	f7fc fbf1 	bl	8002778 <HAL_FLASH_Lock>
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e002      	b.n	8005fa0 <SaveFaultStatus+0xa0>
    }

    HAL_FLASH_Lock();
 8005f9a:	f7fc fbed 	bl	8002778 <HAL_FLASH_Lock>
    return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005faa:	bf00      	nop
 8005fac:	40022000 	.word	0x40022000
 8005fb0:	08060000 	.word	0x08060000

08005fb4 <ReadFaultStatus>:

uint32_t ReadFaultStatus(void) {
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
    uint64_t data = *(volatile uint64_t*)FLASH_USER_START_ADDR;
 8005fba:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <ReadFaultStatus+0x48>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t status = data & 0xFFFFFFFF;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	607b      	str	r3, [r7, #4]
    uint32_t complement = (data >> 32) & 0xFFFFFFFF;
 8005fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4613      	mov	r3, r2
 8005fda:	603b      	str	r3, [r7, #0]
    return (status == (uint32_t)~complement) ? status : 0xFFFFFFFF;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d101      	bne.n	8005fea <ReadFaultStatus+0x36>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	e001      	b.n	8005fee <ReadFaultStatus+0x3a>
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	08060000 	.word	0x08060000

08006000 <bQueueinit>:
 * @param array 데이터 저장에 사용할 배열 포인터
 * @param _QueueSize 배열 크기 (capacity)
 * @retval true 초기화 성공
 * @retval false 배열이 NULL인 경우
 */
bool bQueueinit(CircularQueue *hQueue, element *array, uint32_t _QueueSize) {
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
	if (array == NULL)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <bQueueinit+0x16>
		return false;               ///< 배열이 없으면 큐를 만들 수 없으니 실패 반환
 8006012:	2300      	movs	r3, #0
 8006014:	e00f      	b.n	8006036 <bQueueinit+0x36>
	hQueue->array = array;          ///< 큐가 사용할 저장 공간 정함(array)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	601a      	str	r2, [r3, #0]
	hQueue->iFront = 0;             ///< 큐의 맨 앞 front 0으로 초기화
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	605a      	str	r2, [r3, #4]
	hQueue->iRear = 0;              ///< 큐의 맨 뒤 rear 0으로 초기화
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	609a      	str	r2, [r3, #8]
	hQueue->iCapacity = _QueueSize; ///< 큐 최대 크기 설정
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	611a      	str	r2, [r3, #16]
	hQueue->iSize = 0;              ///< 현재 요소 수 0으로 설정(큐가 비어 있다고 표시)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	60da      	str	r2, [r3, #12]
	return true;
 8006034:	2301      	movs	r3, #1
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <bIsQueueEmpty>:
 * @param hQueue 큐 구조체 포인터
 * @retval true 비어 있음
 * @retval false 데이터 존재
 */
///< bool 타입의 bIsQueueEmpty 함수의 인자로 원형 큐 구조체를 가진 큐 포인터
bool bIsQueueEmpty(CircularQueue *hQueue) {
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
	  ///< 큐의 Rear 와 Front 의 위치가 같을 시 큐가 비어있다고 판단
	return hQueue->iRear == hQueue->iFront;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <bIsQueueFull>:
 * @param hQueue 큐 구조체 포인터
 * @retval true 가득 참
 * @retval false 공간 있음
 */
///< bool 타입의 bIsQueueFull 함수의 인자로 원형 큐 구조체를 가진 큐 포인터
bool bIsQueueFull(CircularQueue *hQueue) {
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	///< 다음 데이터가 들어올 위치를 계산 후
	///<전체 배열의 크기로 나눈 크기가 front와 같으면 큐가 가득 찼다고 판단
	return ((hQueue->iRear + 1) % hQueue->iCapacity) == hQueue->iFront;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	3301      	adds	r3, #1
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6912      	ldr	r2, [r2, #16]
 800607a:	fb93 f1f2 	sdiv	r1, r3, r2
 800607e:	fb01 f202 	mul.w	r2, r1, r2
 8006082:	1a9a      	subs	r2, r3, r2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <bEnqueue>:
 * @param _data 삽입할 데이터
 * @retval true 삽입 성공
 * @retval false 큐가 가득 참
 */
///< bool 타입의 bEnqueue 함수의 인자로 원형 큐 구조체를 가진 큐 포인터와 큐에 넣을 데이터
bool bEnqueue(CircularQueue *hQueue, uint8_t data) {
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
    ///< 1. 큐가 가득 찼는지 먼저 확인
    if (bIsQueueFull(hQueue))
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff ffdc 	bl	8006068 <bIsQueueFull>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <bEnqueue+0x1c>
        return false;  // 큐가 가득 차 있으면 데이터를 넣지 않고 false(실패)를 반환
 80060b6:	2300      	movs	r3, #0
 80060b8:	e013      	b.n	80060e2 <bEnqueue+0x44>

    ///< 2. rear가 가리키는 배열 위치에 새로운 데이터를 저장
    hQueue->array[hQueue->iRear] = data;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6892      	ldr	r2, [r2, #8]
 80060c2:	4413      	add	r3, r2
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	701a      	strb	r2, [r3, #0]

    ///< 3. rear를 다음 위치로 이동
    ///<  (현재 rear에 1을 더한 뒤, 전체 배열 크기로 나눈 나머지 값을 rear에 저장)
    ///<  이렇게 하면 rear가 배열의 끝에 도달했을 때 다시 0번 인덱스로 돌아옴
    hQueue->iRear = (hQueue->iRear + 1) % hQueue->iCapacity;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	3301      	adds	r3, #1
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6912      	ldr	r2, [r2, #16]
 80060d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80060d6:	fb01 f202 	mul.w	r2, r1, r2
 80060da:	1a9a      	subs	r2, r3, r2
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	609a      	str	r2, [r3, #8]

    ///< 4. 데이터 삽입이 성공했으니 true(성공)를 반환
    return true;
 80060e0:	2301      	movs	r3, #1
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <bDequeue>:
 * @param Data 추출한 데이터를 저장할 포인터
 * @retval true 추출 성공
 * @retval false 큐가 비어 있음
 */
///< bool 타입의 bDequeue 함수의 인자로 원형 큐 구조체를 가진 큐 포인터와 큐에 넣을 데이터
bool bDequeue(CircularQueue *hQueue, element *Data) {
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
	///< 큐가 비어있는지 확인
	if (bIsQueueEmpty(hQueue))
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ffa4 	bl	8006042 <bIsQueueEmpty>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <bDequeue+0x1a>
		return false; ///< 큐가 비어 있으면 추출 불가
 8006100:	2300      	movs	r3, #0
 8006102:	e014      	b.n	800612e <bDequeue+0x44>
	*Data = hQueue->array[hQueue->iFront];   ///< front 위치의 데이터 추출
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6852      	ldr	r2, [r2, #4]
 800610c:	4413      	add	r3, r2
 800610e:	781a      	ldrb	r2, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	701a      	strb	r2, [r3, #0]
	///< front를 큐의 다음 위치로 이동시키는데, 큐의 끝이면 처음으로 돌아감
	hQueue->iFront = (hQueue->iFront + 1) % hQueue->iCapacity;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	3301      	adds	r3, #1
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6912      	ldr	r2, [r2, #16]
 800611e:	fb93 f1f2 	sdiv	r1, r3, r2
 8006122:	fb01 f202 	mul.w	r2, r1, r2
 8006126:	1a9a      	subs	r2, r3, r2
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	605a      	str	r2, [r3, #4]
	return true;
 800612c:	2301      	movs	r3, #1
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <InitPirSensor>:
/*----------------------[ 센서 핀 초기화 ]----------------------*/
/**
 * @brief PIR 센서 핀 초기화
 * @details 입력 모드, 풀업/풀다운 없음
 */
void InitPirSensor(void) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	605a      	str	r2, [r3, #4]
 8006146:	609a      	str	r2, [r3, #8]
 8006148:	60da      	str	r2, [r3, #12]
 800614a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800614c:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <InitPirSensor+0x4c>)
 800614e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006150:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <InitPirSensor+0x4c>)
 8006152:	f043 0304 	orr.w	r3, r3, #4
 8006156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006158:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <InitPirSensor+0x4c>)
 800615a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = PIR_SENSOR_PIN;
 8006164:	2340      	movs	r3, #64	@ 0x40
 8006166:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006168:	2300      	movs	r3, #0
 800616a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(PIR_SENSOR_PORT, &GPIO_InitStruct);
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4804      	ldr	r0, [pc, #16]	@ (8006188 <InitPirSensor+0x50>)
 8006176:	f7fc fce7 	bl	8002b48 <HAL_GPIO_Init>
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000
 8006188:	48000800 	.word	0x48000800

0800618c <IsPirstate>:
/*----------------------[ 감지 상태 반환 ]----------------------*/
/**
 * @brief PIR 센서 감지 여부 반환
 * @return true = 감지됨, false = 감지 안됨
 */
bool IsPirstate(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN) == GPIO_PIN_SET;
 8006190:	2140      	movs	r1, #64	@ 0x40
 8006192:	4805      	ldr	r0, [pc, #20]	@ (80061a8 <IsPirstate+0x1c>)
 8006194:	f7fc fe52 	bl	8002e3c <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	48000800 	.word	0x48000800

080061ac <InitLedSensor>:
/*----------------------[ LED 초기화 ]----------------------*/
/**
 * @brief LED 핀 초기화
 * @details GPIO를 출력 모드로 설정
 */
void InitLedSensor(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80061c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006200 <InitLedSensor+0x54>)
 80061c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006200 <InitLedSensor+0x54>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006200 <InitLedSensor+0x54>)
 80061ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_CONTROL_PIN;
 80061d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061de:	2301      	movs	r3, #1
 80061e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e6:	2300      	movs	r3, #0
 80061e8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(LED_CONTROL_PORT, &GPIO_InitStruct);
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061f2:	f7fc fca9 	bl	8002b48 <HAL_GPIO_Init>
}
 80061f6:	bf00      	nop
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000

08006204 <SetLedState>:
/*----------------------[ LED 상태 설정 ]----------------------*/
/**
 * @brief LED 상태 직접 제어
 * @param on true = ON, false = OFF
 */
void SetLedState(bool on) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_CONTROL_PORT, LED_CONTROL_PIN,
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	461a      	mov	r2, r3
 8006212:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800621a:	f7fc fe27 	bl	8002e6c <HAL_GPIO_WritePin>
			on ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <TurnOnLed>:

/*----------------------[ LED ON/OFF 함수 ]----------------------*/
/**
 * @brief LED ON
 */
void TurnOnLed(void) {
 8006226:	b580      	push	{r7, lr}
 8006228:	af00      	add	r7, sp, #0
	SetLedState(true);
 800622a:	2001      	movs	r0, #1
 800622c:	f7ff ffea 	bl	8006204 <SetLedState>
}
 8006230:	bf00      	nop
 8006232:	bd80      	pop	{r7, pc}

08006234 <TurnOffLed>:

/**
 * @brief LED OFF
 */
void TurnOffLed(void) {
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	SetLedState(false);
 8006238:	2000      	movs	r0, #0
 800623a:	f7ff ffe3 	bl	8006204 <SetLedState>
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}

08006242 <GetLedState>:
/*----------------------[ LED 상태 확인 ]----------------------*/
/**
 * @brief 현재 LED 상태 반환
 * @return true = 켜짐, false = 꺼짐
 */
bool GetLedState(void) {
 8006242:	b580      	push	{r7, lr}
 8006244:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(LED_CONTROL_PORT, LED_CONTROL_PIN) == GPIO_PIN_SET;
 8006246:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800624a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800624e:	f7fc fdf5 	bl	8002e3c <HAL_GPIO_ReadPin>
 8006252:	4603      	mov	r3, r0
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
}
 800625e:	4618      	mov	r0, r3
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <InitCdsSensor>:
/*----------------------[ 센서 초기화 ]----------------------*/
/**
 * @brief CDS 센서 초기화
 * @details 내부 오류 상태 초기화
 */
void InitCdsSensor(void) {
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
	lastErrorState = false;
 8006268:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <InitCdsSensor+0x14>)
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	200002ac 	.word	0x200002ac

0800627c <GetCdsLevel>:
/**
 * @brief 조도 센서 값 측정
 * @details ADC N회 샘플링 평균값을 반환
 * @return 평균 ADC 값 (0 ~ 4095)
 */
uint32_t GetCdsLevel(void) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < CDS_SENSOR_SAMPLE_COUNT; i++) {
 8006286:	2300      	movs	r3, #0
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	e010      	b.n	80062ae <GetCdsLevel+0x32>
		HAL_ADC_Start(&hadc1);
 800628c:	480e      	ldr	r0, [pc, #56]	@ (80062c8 <GetCdsLevel+0x4c>)
 800628e:	f7fb f96b 	bl	8001568 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, CDS_SENSOR_ADC_TIMEOUT);
 8006292:	2164      	movs	r1, #100	@ 0x64
 8006294:	480c      	ldr	r0, [pc, #48]	@ (80062c8 <GetCdsLevel+0x4c>)
 8006296:	f7fb f9ca 	bl	800162e <HAL_ADC_PollForConversion>
		sum += HAL_ADC_GetValue(&hadc1);
 800629a:	480b      	ldr	r0, [pc, #44]	@ (80062c8 <GetCdsLevel+0x4c>)
 800629c:	f7fb fa56 	bl	800174c <HAL_ADC_GetValue>
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < CDS_SENSOR_SAMPLE_COUNT; i++) {
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	ddeb      	ble.n	800628c <GetCdsLevel+0x10>
	}

	return sum / CDS_SENSOR_SAMPLE_COUNT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a05      	ldr	r2, [pc, #20]	@ (80062cc <GetCdsLevel+0x50>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	089b      	lsrs	r3, r3, #2
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200000b0 	.word	0x200000b0
 80062cc:	cccccccd 	.word	0xcccccccd

080062d0 <IsCdsLevelOutOfRange>:
/*----------------------[ 센서 오류 검사 ]----------------------*/
/**
 * @brief CDS 조도 값이 정상 범위를 벗어났는지 확인
 * @return true = 오류 감지됨, false = 정상 범위
 */
bool IsCdsLevelOutOfRange(void) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
	uint32_t level = GetCdsLevel();
 80062d6:	f7ff ffd1 	bl	800627c <GetCdsLevel>
 80062da:	6078      	str	r0, [r7, #4]
	return (level < cds_error_min || level > cds_error_max);
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <IsCdsLevelOutOfRange+0x38>)
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d305      	bcc.n	80062f4 <IsCdsLevelOutOfRange+0x24>
 80062e8:	4b08      	ldr	r3, [pc, #32]	@ (800630c <IsCdsLevelOutOfRange+0x3c>)
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <IsCdsLevelOutOfRange+0x28>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <IsCdsLevelOutOfRange+0x2a>
 80062f8:	2300      	movs	r3, #0
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000002c 	.word	0x2000002c
 800630c:	2000002e 	.word	0x2000002e

08006310 <DetectLedFaultByCds>:
/**
 * @brief 전등이 켜졌을 때 CDS 센서 값이 비정상인지 확인 (LED 고장 탐지)
 * @return true = 고장 감지, false = 정상
 */
bool DetectLedFaultByCds(void) {
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
	return (GetLedState() == LED_ON && IsCdsLevelOutOfRange());
 8006314:	f7ff ff95 	bl	8006242 <GetLedState>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <DetectLedFaultByCds+0x1c>
 800631e:	f7ff ffd7 	bl	80062d0 <IsCdsLevelOutOfRange>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <DetectLedFaultByCds+0x1c>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <DetectLedFaultByCds+0x1e>
 800632c:	2300      	movs	r3, #0
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	b2db      	uxtb	r3, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}

08006338 <InitAllSensors>:
/**
 * @brief PIR, CDS, LED 센서를 모두 초기화
 * - 센서별 내부 GPIO, 변수, ADC 설정 등을 각각 초기화
 * - 센서 통합 초기화 진입점으로 사용
 */
void InitAllSensors(void) {
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
    /* ------------------------------------------------------------------------
     * [1] CDS 조도 센서 초기화
     * ------------------------------------------------------------------------ */
    InitCdsSensor();
 800633c:	f7ff ff92 	bl	8006264 <InitCdsSensor>
    /* ------------------------------------------------------------------------
     * [2] PIR 인체 감지 센서 초기화
     * ------------------------------------------------------------------------ */
    InitPirSensor();
 8006340:	f7ff fefa 	bl	8006138 <InitPirSensor>
    /* ------------------------------------------------------------------------
     * [3] 전등(LED) 제어용 센서/제어핀 초기화
     * ------------------------------------------------------------------------ */
    InitLedSensor();
 8006344:	f7ff ff32 	bl	80061ac <InitLedSensor>
}
 8006348:	bf00      	nop
 800634a:	bd80      	pop	{r7, pc}

0800634c <PirDetected>:
 * @param now 현재 시스템 시간 (ms 단위)
 * @details
 * - 감지 시각을 기록하고, 이전 상태와 비교해 감지 상태 보고
 * - LED를 ON 상태로 설정하고 RTU에 상태 보고
 */
void PirDetected(uint32_t now) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
    /* ------------------------------------------------------------------------
     * [1] 마지막 감지 시각 갱신
     * ------------------------------------------------------------------------ */
    lastPirDetectionTime = now;
 8006354:	4a0f      	ldr	r2, [pc, #60]	@ (8006394 <PirDetected+0x48>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6013      	str	r3, [r2, #0]

    /* ------------------------------------------------------------------------
     * [2] 이전 상태가 미감지였을 경우에만 PIR 상태 보고
     * - 동일 상태 반복 보고 방지
     * ------------------------------------------------------------------------ */
    if (lastPirStatus != PIR_DETECTED) {
 800635a:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <PirDetected+0x4c>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d005      	beq.n	800636e <PirDetected+0x22>
        SendPirStatusPacket(PIR_DETECTED);  ///< RTU에 PIR 감지 상태 보고
 8006362:	2001      	movs	r0, #1
 8006364:	f000 f9ec 	bl	8006740 <SendPirStatusPacket>
        lastPirStatus = PIR_DETECTED;       ///< 내부 상태 갱신
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <PirDetected+0x4c>)
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]

    /* ------------------------------------------------------------------------
     * [3] LED ON 및 상태 보고
     * - 이미 켜져 있지 않은 경우에만 동작
     * ------------------------------------------------------------------------ */
    if (GetLedState() != LED_ON) {
 800636e:	f7ff ff68 	bl	8006242 <GetLedState>
 8006372:	4603      	mov	r3, r0
 8006374:	f083 0301 	eor.w	r3, r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <PirDetected+0x3e>
        SetLedState(LED_ON);
 800637e:	2001      	movs	r0, #1
 8006380:	f7ff ff40 	bl	8006204 <SetLedState>
        SendLedStateReport(LED_ON);
 8006384:	2001      	movs	r0, #1
 8006386:	f000 f9c3 	bl	8006710 <SendLedStateReport>
    }
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	200002b0 	.word	0x200002b0
 8006398:	200002b5 	.word	0x200002b5

0800639c <PirHoldTimeout>:
 * @param now 현재 시스템 시간 (ms 단위)
 * @details
 * - 마지막 PIR 감지 이후 지정된 유지 시간이 경과하면 LED를 OFF함
 * - 이미 꺼져 있는 경우, 다시 감지된 경우, 유지 시간이 미도달 시 무시
 */
void PirHoldTimeout(uint32_t now) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
    /* ------------------------------------------------------------------------
     * [1] 현재 LED가 이미 꺼져 있으면 처리 불필요
     * ------------------------------------------------------------------------ */
    if (GetLedState() != LED_ON)
 80063a4:	f7ff ff4d 	bl	8006242 <GetLedState>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f083 0301 	eor.w	r3, r3, #1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11e      	bne.n	80063f2 <PirHoldTimeout+0x56>
        return;
    /* ------------------------------------------------------------------------
     * [2] PIR 유지 시간 미도달 시 대기
     * - 감지 이후 일정 시간(pirHoldDuration) 유지 조건을 만족하지 않으면 리턴
     * ------------------------------------------------------------------------ */
    if ((now - lastPirDetectionTime) < pirHoldDuration)
 80063b4:	4b13      	ldr	r3, [pc, #76]	@ (8006404 <PirHoldTimeout+0x68>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <PirHoldTimeout+0x6c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d318      	bcc.n	80063f6 <PirHoldTimeout+0x5a>
        return;
    /* ------------------------------------------------------------------------
     * [3] 아직 PIR이 감지된 상태라면 종료
     * - PIR 미감지 상태에서만 OFF 처리 가능
     * ------------------------------------------------------------------------ */
    if (IsPirstate() == PIR_DETECTED)
 80063c4:	f7ff fee2 	bl	800618c <IsPirstate>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d115      	bne.n	80063fa <PirHoldTimeout+0x5e>
        return;

    if (IsPirstate() == PIR_NOT_DETECTED)
 80063ce:	f7ff fedd 	bl	800618c <IsPirstate>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f083 0301 	eor.w	r3, r3, #1
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <PirHoldTimeout+0x48>
    SetLedState(LED_OFF);                 ///< 실제 LED OFF
 80063de:	2000      	movs	r0, #0
 80063e0:	f7ff ff10 	bl	8006204 <SetLedState>
    SendLedStateReport(LED_OFF);          ///< RTU에 전등 OFF 상태 보고
 80063e4:	2000      	movs	r0, #0
 80063e6:	f000 f993 	bl	8006710 <SendLedStateReport>
    lastPirStatus = PIR_NOT_DETECTED;     ///< 내부 PIR 상태 갱신 (패킷은 전송 안 함)
 80063ea:	4b08      	ldr	r3, [pc, #32]	@ (800640c <PirHoldTimeout+0x70>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e004      	b.n	80063fc <PirHoldTimeout+0x60>
        return;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <PirHoldTimeout+0x60>
        return;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <PirHoldTimeout+0x60>
        return;
 80063fa:	bf00      	nop
}
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200002b0 	.word	0x200002b0
 8006408:	20000030 	.word	0x20000030
 800640c:	200002b5 	.word	0x200002b5

08006410 <CheckLightFail>:
 * @details
 * - 조도가 기준 이하일 경우 일정 시간 동안 유지되면 전등 고장으로 간주
 * - 중복 전송 방지를 위해 이전 전송 여부 상태(`lastCdsError`)와 비교
 * - 고장 발생 시에는 전송하고, 정상 복귀 시에는 상태만 리셋 (보고는 선택사항)
 */
void CheckLightFail(bool cdsFault, uint32_t now) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	6039      	str	r1, [r7, #0]
 800641a:	71fb      	strb	r3, [r7, #7]
    /* ------------------------------------------------------------------------
     * [0] 플래시 메모리에서 이전 오류 상태 로드 (시작 시 1회 실행)
     * ------------------------------------------------------------------------ */
    static bool isInitialized = false;
    if (!isInitialized) {
 800641c:	4b2c      	ldr	r3, [pc, #176]	@ (80064d0 <CheckLightFail+0xc0>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f083 0301 	eor.w	r3, r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <CheckLightFail+0x38>
        lastCdsError = (ReadFaultStatus() == CDS_ERROR_FLASH_ID) ? CDS_ERROR : CDS_NO_ERROR;
 800642a:	f7ff fdc3 	bl	8005fb4 <ReadFaultStatus>
 800642e:	4603      	mov	r3, r0
 8006430:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	4b25      	ldr	r3, [pc, #148]	@ (80064d4 <CheckLightFail+0xc4>)
 8006440:	701a      	strb	r2, [r3, #0]
        isInitialized = true;
 8006442:	4b23      	ldr	r3, [pc, #140]	@ (80064d0 <CheckLightFail+0xc0>)
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
    }

    /* ------------------------------------------------------------------------
     * [1] CDS 이상 상태 감지 (LED는 ON인데 어두운 경우)
     * ------------------------------------------------------------------------ */
    if (cdsFault) {
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d024      	beq.n	8006498 <CheckLightFail+0x88>
        if (!cdsErrorPending) {
 800644e:	4b22      	ldr	r3, [pc, #136]	@ (80064d8 <CheckLightFail+0xc8>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f083 0301 	eor.w	r3, r3, #1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <CheckLightFail+0x5a>
            cdsErrorPending = true;
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <CheckLightFail+0xc8>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
            cdsErrorStartTime = now;
 8006462:	4a1e      	ldr	r2, [pc, #120]	@ (80064dc <CheckLightFail+0xcc>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6013      	str	r3, [r2, #0]

            // [추가] 정상 상태 플래시 메모리 저장
            SaveFaultStatus(CDS_NO_ERROR_FLASH_ID); // 0x00000000
        }
    }
}
 8006468:	e02d      	b.n	80064c6 <CheckLightFail+0xb6>
        else if ((now - cdsErrorStartTime) >= CDS_RETRY_TIMEOUT_MS &&
 800646a:	4b1c      	ldr	r3, [pc, #112]	@ (80064dc <CheckLightFail+0xcc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006476:	4293      	cmp	r3, r2
 8006478:	d925      	bls.n	80064c6 <CheckLightFail+0xb6>
                 lastCdsError == CDS_NO_ERROR)
 800647a:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <CheckLightFail+0xc4>)
 800647c:	781b      	ldrb	r3, [r3, #0]
        else if ((now - cdsErrorStartTime) >= CDS_RETRY_TIMEOUT_MS &&
 800647e:	2b00      	cmp	r3, #0
 8006480:	d121      	bne.n	80064c6 <CheckLightFail+0xb6>
            SendLightFail(true);
 8006482:	2001      	movs	r0, #1
 8006484:	f000 f97a 	bl	800677c <SendLightFail>
            lastCdsError = CDS_ERROR;
 8006488:	4b12      	ldr	r3, [pc, #72]	@ (80064d4 <CheckLightFail+0xc4>)
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
            SaveFaultStatus(CDS_ERROR_FLASH_ID); // 0xA5A5A5A5
 800648e:	f04f 30a5 	mov.w	r0, #2779096485	@ 0xa5a5a5a5
 8006492:	f7ff fd35 	bl	8005f00 <SaveFaultStatus>
}
 8006496:	e016      	b.n	80064c6 <CheckLightFail+0xb6>
    else if (lastCdsError == CDS_ERROR) {
 8006498:	4b0e      	ldr	r3, [pc, #56]	@ (80064d4 <CheckLightFail+0xc4>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d112      	bne.n	80064c6 <CheckLightFail+0xb6>
        if ((now - cdsErrorStartTime) >= CDS_ERROR_HOLD_TIME_MS) {
 80064a0:	4b0e      	ldr	r3, [pc, #56]	@ (80064dc <CheckLightFail+0xcc>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80064ac:	d30b      	bcc.n	80064c6 <CheckLightFail+0xb6>
            SendLightFail(false);
 80064ae:	2000      	movs	r0, #0
 80064b0:	f000 f964 	bl	800677c <SendLightFail>
            cdsErrorPending = false;
 80064b4:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <CheckLightFail+0xc8>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
            lastCdsError = CDS_NO_ERROR;
 80064ba:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <CheckLightFail+0xc4>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
            SaveFaultStatus(CDS_NO_ERROR_FLASH_ID); // 0x00000000
 80064c0:	2000      	movs	r0, #0
 80064c2:	f7ff fd1d 	bl	8005f00 <SaveFaultStatus>
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200002bd 	.word	0x200002bd
 80064d4:	200002b7 	.word	0x200002b7
 80064d8:	200002bc 	.word	0x200002bc
 80064dc:	200002b8 	.word	0x200002b8

080064e0 <CalculateChecksum>:
 * @brief 수신 패킷의 체크섬 계산 (RTU 방식: STX부터 Data까지 덧셈)
 * @param raw 바이트 배열 포인터
 * @param length 체크섬 계산 대상 길이 (STX ~ 마지막 Data까지)
 * @retval 계산된 체크섬 (8비트 덧셈 누적 결과)
 */
uint8_t CalculateChecksum(const uint8_t *raw, uint8_t length) {
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 80064f0:	2300      	movs	r3, #0
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	e009      	b.n	800650a <CalculateChecksum+0x2a>
        sum += raw[i];
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	4413      	add	r3, r2
 8006502:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	3301      	adds	r3, #1
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	dbf1      	blt.n	80064f6 <CalculateChecksum+0x16>
    }
    return sum;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <ProcessAllSensors>:
 * @details
 * - CDS 센서를 이용한 LED 고장 감지
 * - 일정 시간 이상 수동 제어가 없으면 자동 제어로 복귀
 * - PIR 감지에 따라 LED 자동 제어 수행
 */
void ProcessAllSensors(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
    /* ------------------------------------------------------------------------
     * [1] CDS 센서 기반 LED 이상 상태 점검
     * - CDS 값이 정상 동작 범위를 벗어나면 CheckLightFail()에서 패킷 전송
     * ------------------------------------------------------------------------ */
    uint8_t cds  = DetectLedFaultByCds();     ///< CDS 값 측정 (LED 점등 상태 기반)
 8006526:	f7ff fef3 	bl	8006310 <DetectLedFaultByCds>
 800652a:	4603      	mov	r3, r0
 800652c:	71fb      	strb	r3, [r7, #7]
    uint32_t now = HAL_GetTick();            ///< 현재 시간 획득
 800652e:	f7fa fccb 	bl	8000ec8 <HAL_GetTick>
 8006532:	6038      	str	r0, [r7, #0]
    CheckLightFail(cds, now);                ///< CDS 이상 여부 판단 및 보고
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ff64 	bl	8006410 <CheckLightFail>

    /* ------------------------------------------------------------------------
     * [2] 수동 제어 중이면 자동 제어 중단
     * ------------------------------------------------------------------------ */
    if (manualLedOverride)
 8006548:	4b0a      	ldr	r3, [pc, #40]	@ (8006574 <ProcessAllSensors+0x54>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10c      	bne.n	800656a <ProcessAllSensors+0x4a>
    /* ------------------------------------------------------------------------
     * [3] PIR 센서 상태에 따라 LED 자동 제어 수행
     * - 감지 시: LED ON + PIR 상태 보고
     * - 미감지 시: 일정 시간 후 LED OFF
     * ------------------------------------------------------------------------ */
    if (IsPirstate() == PIR_DETECTED) {
 8006550:	f7ff fe1c 	bl	800618c <IsPirstate>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <ProcessAllSensors+0x42>
        PirDetected(now);          ///< PIR 감지 → LED ON + 상태 보고
 800655a:	6838      	ldr	r0, [r7, #0]
 800655c:	f7ff fef6 	bl	800634c <PirDetected>
 8006560:	e004      	b.n	800656c <ProcessAllSensors+0x4c>
    } else {
        PirHoldTimeout(now);       ///< PIR 미감지 지속 시 → LED OFF 처리
 8006562:	6838      	ldr	r0, [r7, #0]
 8006564:	f7ff ff1a 	bl	800639c <PirHoldTimeout>
 8006568:	e000      	b.n	800656c <ProcessAllSensors+0x4c>
        return;
 800656a:	bf00      	nop
    }
}
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200002b4 	.word	0x200002b4

08006578 <SendEEADataPacket>:
 * @param dstId 수신 대상 디바이스 ID (예: RTU_ID)
 * @param command 명령어 코드
 * @param payload 전송할 데이터 (NULL 가능, 길이 0인 경우 사용 안 함)
 * @param length payload의 길이 (최대 32 바이트)
 */
void SendEEADataPacket(uint8_t dstId, uint8_t command, uint8_t *payload, uint8_t length) {
 8006578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800657c:	b0a1      	sub	sp, #132	@ 0x84
 800657e:	af00      	add	r7, sp, #0
 8006580:	603a      	str	r2, [r7, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	4603      	mov	r3, r0
 8006586:	71fb      	strb	r3, [r7, #7]
 8006588:	460b      	mov	r3, r1
 800658a:	71bb      	strb	r3, [r7, #6]
 800658c:	4613      	mov	r3, r2
 800658e:	717b      	strb	r3, [r7, #5]
 8006590:	466b      	mov	r3, sp
 8006592:	461e      	mov	r6, r3
    SetLoRaDestination(dstId); ///< [1] LoRa 대상 설정
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	b29b      	uxth	r3, r3
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fb0b 	bl	8005bb4 <SetLoRaDestination>

    EEAPacket_t pkt = {
 800659e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	605a      	str	r2, [r3, #4]
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	23fe      	movs	r3, #254	@ 0xfe
 80065ae:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 80065b2:	2302      	movs	r3, #2
 80065b4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80065c4:	79bb      	ldrb	r3, [r7, #6]
 80065c6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80065ca:	797b      	ldrb	r3, [r7, #5]
 80065cc:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 80065d0:	23ef      	movs	r3, #239	@ 0xef
 80065d2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        .command = command,
        .length  = length,
        .etx     = EEA_ETX
    };

    if (length > 0 && payload != NULL) {
 80065d6:	797b      	ldrb	r3, [r7, #5]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <SendEEADataPacket+0x7a>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <SendEEADataPacket+0x7a>
        memcpy(pkt.data, payload, length);
 80065e2:	797a      	ldrb	r2, [r7, #5]
 80065e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80065e8:	3306      	adds	r3, #6
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 faf4 	bl	8006bda <memcpy>
    }

    // [1] STX~DATA까지를 기준으로 Checksum 계산
    uint8_t rawBuf[HEADER_SIZE + pkt.length];
 80065f2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80065f6:	1d99      	adds	r1, r3, #6
 80065f8:	1e4b      	subs	r3, r1, #1
 80065fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065fc:	460a      	mov	r2, r1
 80065fe:	2300      	movs	r3, #0
 8006600:	4690      	mov	r8, r2
 8006602:	4699      	mov	r9, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006610:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006614:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006618:	460a      	mov	r2, r1
 800661a:	2300      	movs	r3, #0
 800661c:	4614      	mov	r4, r2
 800661e:	461d      	mov	r5, r3
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	00eb      	lsls	r3, r5, #3
 800662a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800662e:	00e2      	lsls	r2, r4, #3
 8006630:	460b      	mov	r3, r1
 8006632:	3307      	adds	r3, #7
 8006634:	08db      	lsrs	r3, r3, #3
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	ebad 0d03 	sub.w	sp, sp, r3
 800663c:	466b      	mov	r3, sp
 800663e:	3300      	adds	r3, #0
 8006640:	677b      	str	r3, [r7, #116]	@ 0x74
    rawBuf[0] = pkt.stx;
 8006642:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8006646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006648:	701a      	strb	r2, [r3, #0]
    rawBuf[1] = pkt.srcId;
 800664a:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800664e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006650:	705a      	strb	r2, [r3, #1]
    rawBuf[2] = pkt.dstId;
 8006652:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8006656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006658:	709a      	strb	r2, [r3, #2]
    rawBuf[3] = pkt.blockId;
 800665a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800665e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006660:	70da      	strb	r2, [r3, #3]
    rawBuf[4] = pkt.command;
 8006662:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8006666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006668:	711a      	strb	r2, [r3, #4]
    rawBuf[5] = pkt.length;
 800666a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800666e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006670:	715a      	strb	r2, [r3, #5]
    for (int i = 0; i < pkt.length; i++) {
 8006672:	2300      	movs	r3, #0
 8006674:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006676:	e00b      	b.n	8006690 <SendEEADataPacket+0x118>
        rawBuf[6 + i] = pkt.data[i];
 8006678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800667a:	3306      	adds	r3, #6
 800667c:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 8006680:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006682:	440a      	add	r2, r1
 8006684:	7811      	ldrb	r1, [r2, #0]
 8006686:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006688:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < pkt.length; i++) {
 800668a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800668c:	3301      	adds	r3, #1
 800668e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006690:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8006694:	461a      	mov	r2, r3
 8006696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006698:	4293      	cmp	r3, r2
 800669a:	dbed      	blt.n	8006678 <SendEEADataPacket+0x100>
    }

    pkt.checksum = CalculateChecksum(rawBuf, HEADER_SIZE + pkt.length);
 800669c:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80066a0:	3306      	adds	r3, #6
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80066a8:	f7ff ff1a 	bl	80064e0 <CalculateChecksum>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a

    // [2] 마지막 전송 패킷 기록
    memcpy((void *)(volatile void *)&latestTxPacket, &pkt, sizeof(EEAPacket_t));
 80066b2:	4b14      	ldr	r3, [pc, #80]	@ (8006704 <SendEEADataPacket+0x18c>)
 80066b4:	461d      	mov	r5, r3
 80066b6:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80066ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066bc:	6028      	str	r0, [r5, #0]
 80066be:	6069      	str	r1, [r5, #4]
 80066c0:	60aa      	str	r2, [r5, #8]
 80066c2:	60eb      	str	r3, [r5, #12]

    // [3] 직렬화 → 송신 패킷 구성 → 전송
    uint8_t data[16];
    int len = SerializeEEAPacket(data, &pkt); ///< [2] EEA 패킷 직렬화
 80066c4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80066c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fb9a 	bl	8005e08 <SerializeEEAPacket>
 80066d4:	6738      	str	r0, [r7, #112]	@ 0x70

    uint8_t packet[64];
    int packetLen = iE220LoRaMakePacket(gDstInfo, data, len, packet); ///< [3] LoRa 포맷화
 80066d6:	f107 030c 	add.w	r3, r7, #12
 80066da:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80066de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80066e0:	4809      	ldr	r0, [pc, #36]	@ (8006708 <SendEEADataPacket+0x190>)
 80066e2:	f7ff fa21 	bl	8005b28 <iE220LoRaMakePacket>
 80066e6:	66f8      	str	r0, [r7, #108]	@ 0x6c
    E220LoRaSendPacket(&myLoRa, packet, packetLen); ///< [4] 전송
 80066e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	4619      	mov	r1, r3
 80066f0:	4806      	ldr	r0, [pc, #24]	@ (800670c <SendEEADataPacket+0x194>)
 80066f2:	f7ff fa3d 	bl	8005b70 <E220LoRaSendPacket>
 80066f6:	46b5      	mov	sp, r6
}
 80066f8:	bf00      	nop
 80066fa:	3784      	adds	r7, #132	@ 0x84
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006702:	bf00      	nop
 8006704:	20000154 	.word	0x20000154
 8006708:	20000034 	.word	0x20000034
 800670c:	2000024c 	.word	0x2000024c

08006710 <SendLedStateReport>:
/**
 * @brief 주기적인 LED 상태 보고 패킷 전송 (CMD_LED_CTRL_REQ = 0x02)
 * @param ledStatus 현재 전등 상태 (LED_ON 또는 LED_OFF)
 * @note 항상 전송 (중복 방지 제거)
 */
void SendLedStateReport(uint8_t ledStatus) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
    uint8_t payload = ledStatus;
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	73fb      	strb	r3, [r7, #15]
    SendEEADataPacket(EEA_RTU_ID, CMD_LED_CTRL_REQ, &payload, 1);
 800671e:	f107 020f 	add.w	r2, r7, #15
 8006722:	2301      	movs	r3, #1
 8006724:	2102      	movs	r1, #2
 8006726:	20fa      	movs	r0, #250	@ 0xfa
 8006728:	f7ff ff26 	bl	8006578 <SendEEADataPacket>
    lastReportedLedStatus = ledStatus;
 800672c:	4a03      	ldr	r2, [pc, #12]	@ (800673c <SendLedStateReport+0x2c>)
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	7013      	strb	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	200002b6 	.word	0x200002b6

08006740 <SendPirStatusPacket>:

/**
 * @brief PIR 감지 상태 보고 패킷 전송 (CMD_PIR_MOVE_REQ = 0x03)
 * @note 상태 변화가 있을 때만 보고
 */
void SendPirStatusPacket(bool detected) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	71fb      	strb	r3, [r7, #7]
    if (!detected) return;
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	f083 0301 	eor.w	r3, r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10c      	bne.n	8006770 <SendPirStatusPacket+0x30>

    uint8_t payload = 0x01;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
    SendEEADataPacket(EEA_RTU_ID, CMD_PIR_MOVE_REQ, &payload, 1);
 800675a:	f107 020f 	add.w	r2, r7, #15
 800675e:	2301      	movs	r3, #1
 8006760:	2103      	movs	r1, #3
 8006762:	20fa      	movs	r0, #250	@ 0xfa
 8006764:	f7ff ff08 	bl	8006578 <SendEEADataPacket>
    lastPirStatus = PIR_DETECTED;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <SendPirStatusPacket+0x38>)
 800676a:	2201      	movs	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e000      	b.n	8006772 <SendPirStatusPacket+0x32>
    if (!detected) return;
 8006770:	bf00      	nop
}
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200002b5 	.word	0x200002b5

0800677c <SendLightFail>:
/**
 * @brief CDS 센서 기반 전등 고장 또는 복구 상태를 RTU에 보고
 * @param fault true = 고장 발생(0x01), false = 고장 복구(0x00)
 */
void SendLightFail(bool fault) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
    uint8_t payload = fault ? 0x01 : 0x00;
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	73fb      	strb	r3, [r7, #15]
    SendEEADataPacket(EEA_RTU_ID, CMD_LED_FAULT_REQ, &payload, 1);
 800678a:	f107 020f 	add.w	r2, r7, #15
 800678e:	2301      	movs	r3, #1
 8006790:	2104      	movs	r1, #4
 8006792:	20fa      	movs	r0, #250	@ 0xfa
 8006794:	f7ff fef0 	bl	8006578 <SendEEADataPacket>
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <SendPirOffTimeResponse>:
/**
 * @brief PIR OFF 지연시간 설정에 대한 응답 전송 (CMD_PIR_OFF_DELAY_RES)
 */
void SendPirOffTimeResponse(uint8_t dstId) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	71fb      	strb	r3, [r7, #7]
    uint8_t ack = 0x01;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
    SendEEADataPacket(dstId, CMD_PIR_OFF_DELAY_RES, &ack, 1);
 80067ae:	f107 020f 	add.w	r2, r7, #15
 80067b2:	79f8      	ldrb	r0, [r7, #7]
 80067b4:	2301      	movs	r3, #1
 80067b6:	211a      	movs	r1, #26
 80067b8:	f7ff fede 	bl	8006578 <SendEEADataPacket>
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <PirDelayCommand>:
 * @brief PIR 감지 해제 후 LED 소등까지의 지연 시간 설정
 * @param payload 수신 데이터 (payload[0] = MSB, payload[1] = LSB)
 * @param length  payload 길이 (최소 2 이상)
 * @param srcId   요청 송신자 ID (응답 전송 시 사용)
 */
void PirDelayCommand(const uint8_t *payload, uint8_t length, uint8_t srcId) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
 80067d0:	4613      	mov	r3, r2
 80067d2:	70bb      	strb	r3, [r7, #2]
	if (length >= 2) { ///< payload가 2바이트 이상인지 확인
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d913      	bls.n	8006802 <PirDelayCommand+0x3e>
		///< payload[0]: 상위 바이트, payload[1]: 하위 바이트
		///< 두개의 8비트 데이터를 하나의 16비트 값으로 합침
		pirHoldDuration = (payload[0] << 8) | payload[1];
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	3201      	adds	r2, #1
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b08      	ldr	r3, [pc, #32]	@ (800680c <PirDelayCommand+0x48>)
 80067ec:	601a      	str	r2, [r3, #0]
		printf("[CMD] PIR OFF 시간 설정: %lu ms\n", pirHoldDuration);
 80067ee:	4b07      	ldr	r3, [pc, #28]	@ (800680c <PirDelayCommand+0x48>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	4806      	ldr	r0, [pc, #24]	@ (8006810 <PirDelayCommand+0x4c>)
 80067f6:	f000 f91f 	bl	8006a38 <iprintf>
		SendPirOffTimeResponse(srcId); ///< 요청 송신자 주소로 응답 패킷 전송
 80067fa:	78bb      	ldrb	r3, [r7, #2]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff ffcf 	bl	80067a0 <SendPirOffTimeResponse>
	}
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000030 	.word	0x20000030
 8006810:	08007748 	.word	0x08007748

08006814 <LedControlCommand>:
 * @param payload 제어 명령 데이터
 *        - payload[0] = 0xFF: 수동 전등 ON, 자동 제어 중단
 *        - payload[0] = 0x00: 수동 전등 OFF, 자동 제어 복귀
 * @param length  payload 길이
 */
void LedControlCommand(const uint8_t *payload, uint8_t length) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
    if (length < 1)
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d040      	beq.n	80068a8 <LedControlCommand+0x94>
        return;

    uint8_t cmd = payload[0];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	73bb      	strb	r3, [r7, #14]
    bool ledChanged = false;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]

    /* 1. CS 브로드캐스트 명령 처리 */
    if (cmd == 0xFF) {
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	2bff      	cmp	r3, #255	@ 0xff
 8006834:	d10f      	bne.n	8006856 <LedControlCommand+0x42>
        // 수동 전등 ON → 자동 제어 중단
        if (!GetLedState()) {
 8006836:	f7ff fd04 	bl	8006242 <GetLedState>
 800683a:	4603      	mov	r3, r0
 800683c:	f083 0301 	eor.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <LedControlCommand+0x3a>
            TurnOnLed();
 8006846:	f7ff fcee 	bl	8006226 <TurnOnLed>
            ledChanged = true;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
        }
        manualLedOverride = true;
 800684e:	4b18      	ldr	r3, [pc, #96]	@ (80068b0 <LedControlCommand+0x9c>)
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	e01e      	b.n	8006894 <LedControlCommand+0x80>
    }
    else if (cmd == 0x00) {
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10c      	bne.n	8006876 <LedControlCommand+0x62>
        // 수동 전등 OFF → 자동 제어 복귀
        if (GetLedState()) {
 800685c:	f7ff fcf1 	bl	8006242 <GetLedState>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <LedControlCommand+0x5a>
            TurnOffLed();
 8006866:	f7ff fce5 	bl	8006234 <TurnOffLed>
            ledChanged = true;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
        }
        manualLedOverride = false;
 800686e:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <LedControlCommand+0x9c>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e00e      	b.n	8006894 <LedControlCommand+0x80>
    }
    /* 2. RTU 전등 제어 */
    else if (cmd == 0x01) {
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10b      	bne.n	8006894 <LedControlCommand+0x80>
        if (!GetLedState()) {
 800687c:	f7ff fce1 	bl	8006242 <GetLedState>
 8006880:	4603      	mov	r3, r0
 8006882:	f083 0301 	eor.w	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <LedControlCommand+0x80>
            TurnOnLed();
 800688c:	f7ff fccb 	bl	8006226 <TurnOnLed>
            ledChanged = true;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
        }
    }
    /* 3. LED 상태 변화 시 상태 보고 */
    if (ledChanged) {
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <LedControlCommand+0x96>
    	SendLedStateReport(GetLedState() ? 0x01 : 0x00);
 800689a:	f7ff fcd2 	bl	8006242 <GetLedState>
 800689e:	4603      	mov	r3, r0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff ff35 	bl	8006710 <SendLedStateReport>
 80068a6:	e000      	b.n	80068aa <LedControlCommand+0x96>
        return;
 80068a8:	bf00      	nop

    }
}
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200002b4 	.word	0x200002b4

080068b4 <std>:
 80068b4:	2300      	movs	r3, #0
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
 80068ba:	e9c0 3300 	strd	r3, r3, [r0]
 80068be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068c2:	6083      	str	r3, [r0, #8]
 80068c4:	8181      	strh	r1, [r0, #12]
 80068c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068c8:	81c2      	strh	r2, [r0, #14]
 80068ca:	6183      	str	r3, [r0, #24]
 80068cc:	4619      	mov	r1, r3
 80068ce:	2208      	movs	r2, #8
 80068d0:	305c      	adds	r0, #92	@ 0x5c
 80068d2:	f000 f906 	bl	8006ae2 <memset>
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <std+0x58>)
 80068d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068da:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <std+0x5c>)
 80068dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068de:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <std+0x60>)
 80068e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006918 <std+0x64>)
 80068e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <std+0x68>)
 80068e8:	6224      	str	r4, [r4, #32]
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d006      	beq.n	80068fc <std+0x48>
 80068ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068f2:	4294      	cmp	r4, r2
 80068f4:	d002      	beq.n	80068fc <std+0x48>
 80068f6:	33d0      	adds	r3, #208	@ 0xd0
 80068f8:	429c      	cmp	r4, r3
 80068fa:	d105      	bne.n	8006908 <std+0x54>
 80068fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006904:	f000 b966 	b.w	8006bd4 <__retarget_lock_init_recursive>
 8006908:	bd10      	pop	{r4, pc}
 800690a:	bf00      	nop
 800690c:	08006a5d 	.word	0x08006a5d
 8006910:	08006a7f 	.word	0x08006a7f
 8006914:	08006ab7 	.word	0x08006ab7
 8006918:	08006adb 	.word	0x08006adb
 800691c:	200002c0 	.word	0x200002c0

08006920 <stdio_exit_handler>:
 8006920:	4a02      	ldr	r2, [pc, #8]	@ (800692c <stdio_exit_handler+0xc>)
 8006922:	4903      	ldr	r1, [pc, #12]	@ (8006930 <stdio_exit_handler+0x10>)
 8006924:	4803      	ldr	r0, [pc, #12]	@ (8006934 <stdio_exit_handler+0x14>)
 8006926:	f000 b869 	b.w	80069fc <_fwalk_sglue>
 800692a:	bf00      	nop
 800692c:	20000038 	.word	0x20000038
 8006930:	08007491 	.word	0x08007491
 8006934:	20000048 	.word	0x20000048

08006938 <cleanup_stdio>:
 8006938:	6841      	ldr	r1, [r0, #4]
 800693a:	4b0c      	ldr	r3, [pc, #48]	@ (800696c <cleanup_stdio+0x34>)
 800693c:	4299      	cmp	r1, r3
 800693e:	b510      	push	{r4, lr}
 8006940:	4604      	mov	r4, r0
 8006942:	d001      	beq.n	8006948 <cleanup_stdio+0x10>
 8006944:	f000 fda4 	bl	8007490 <_fflush_r>
 8006948:	68a1      	ldr	r1, [r4, #8]
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <cleanup_stdio+0x38>)
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <cleanup_stdio+0x1e>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fd9d 	bl	8007490 <_fflush_r>
 8006956:	68e1      	ldr	r1, [r4, #12]
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <cleanup_stdio+0x3c>)
 800695a:	4299      	cmp	r1, r3
 800695c:	d004      	beq.n	8006968 <cleanup_stdio+0x30>
 800695e:	4620      	mov	r0, r4
 8006960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006964:	f000 bd94 	b.w	8007490 <_fflush_r>
 8006968:	bd10      	pop	{r4, pc}
 800696a:	bf00      	nop
 800696c:	200002c0 	.word	0x200002c0
 8006970:	20000328 	.word	0x20000328
 8006974:	20000390 	.word	0x20000390

08006978 <global_stdio_init.part.0>:
 8006978:	b510      	push	{r4, lr}
 800697a:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <global_stdio_init.part.0+0x30>)
 800697c:	4c0b      	ldr	r4, [pc, #44]	@ (80069ac <global_stdio_init.part.0+0x34>)
 800697e:	4a0c      	ldr	r2, [pc, #48]	@ (80069b0 <global_stdio_init.part.0+0x38>)
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	4620      	mov	r0, r4
 8006984:	2200      	movs	r2, #0
 8006986:	2104      	movs	r1, #4
 8006988:	f7ff ff94 	bl	80068b4 <std>
 800698c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006990:	2201      	movs	r2, #1
 8006992:	2109      	movs	r1, #9
 8006994:	f7ff ff8e 	bl	80068b4 <std>
 8006998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800699c:	2202      	movs	r2, #2
 800699e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a2:	2112      	movs	r1, #18
 80069a4:	f7ff bf86 	b.w	80068b4 <std>
 80069a8:	200003f8 	.word	0x200003f8
 80069ac:	200002c0 	.word	0x200002c0
 80069b0:	08006921 	.word	0x08006921

080069b4 <__sfp_lock_acquire>:
 80069b4:	4801      	ldr	r0, [pc, #4]	@ (80069bc <__sfp_lock_acquire+0x8>)
 80069b6:	f000 b90e 	b.w	8006bd6 <__retarget_lock_acquire_recursive>
 80069ba:	bf00      	nop
 80069bc:	20000401 	.word	0x20000401

080069c0 <__sfp_lock_release>:
 80069c0:	4801      	ldr	r0, [pc, #4]	@ (80069c8 <__sfp_lock_release+0x8>)
 80069c2:	f000 b909 	b.w	8006bd8 <__retarget_lock_release_recursive>
 80069c6:	bf00      	nop
 80069c8:	20000401 	.word	0x20000401

080069cc <__sinit>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4604      	mov	r4, r0
 80069d0:	f7ff fff0 	bl	80069b4 <__sfp_lock_acquire>
 80069d4:	6a23      	ldr	r3, [r4, #32]
 80069d6:	b11b      	cbz	r3, 80069e0 <__sinit+0x14>
 80069d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069dc:	f7ff bff0 	b.w	80069c0 <__sfp_lock_release>
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <__sinit+0x28>)
 80069e2:	6223      	str	r3, [r4, #32]
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <__sinit+0x2c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f5      	bne.n	80069d8 <__sinit+0xc>
 80069ec:	f7ff ffc4 	bl	8006978 <global_stdio_init.part.0>
 80069f0:	e7f2      	b.n	80069d8 <__sinit+0xc>
 80069f2:	bf00      	nop
 80069f4:	08006939 	.word	0x08006939
 80069f8:	200003f8 	.word	0x200003f8

080069fc <_fwalk_sglue>:
 80069fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	4607      	mov	r7, r0
 8006a02:	4688      	mov	r8, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	2600      	movs	r6, #0
 8006a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a10:	d505      	bpl.n	8006a1e <_fwalk_sglue+0x22>
 8006a12:	6824      	ldr	r4, [r4, #0]
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d1f7      	bne.n	8006a08 <_fwalk_sglue+0xc>
 8006a18:	4630      	mov	r0, r6
 8006a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d907      	bls.n	8006a34 <_fwalk_sglue+0x38>
 8006a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	d003      	beq.n	8006a34 <_fwalk_sglue+0x38>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c0      	blx	r8
 8006a32:	4306      	orrs	r6, r0
 8006a34:	3568      	adds	r5, #104	@ 0x68
 8006a36:	e7e9      	b.n	8006a0c <_fwalk_sglue+0x10>

08006a38 <iprintf>:
 8006a38:	b40f      	push	{r0, r1, r2, r3}
 8006a3a:	b507      	push	{r0, r1, r2, lr}
 8006a3c:	4906      	ldr	r1, [pc, #24]	@ (8006a58 <iprintf+0x20>)
 8006a3e:	ab04      	add	r3, sp, #16
 8006a40:	6808      	ldr	r0, [r1, #0]
 8006a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a46:	6881      	ldr	r1, [r0, #8]
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	f000 f9f7 	bl	8006e3c <_vfiprintf_r>
 8006a4e:	b003      	add	sp, #12
 8006a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a54:	b004      	add	sp, #16
 8006a56:	4770      	bx	lr
 8006a58:	20000044 	.word	0x20000044

08006a5c <__sread>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	460c      	mov	r4, r1
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	f000 f868 	bl	8006b38 <_read_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	bfab      	itete	ge
 8006a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a70:	181b      	addge	r3, r3, r0
 8006a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a76:	bfac      	ite	ge
 8006a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a7a:	81a3      	strhlt	r3, [r4, #12]
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <__swrite>:
 8006a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	461f      	mov	r7, r3
 8006a84:	898b      	ldrh	r3, [r1, #12]
 8006a86:	05db      	lsls	r3, r3, #23
 8006a88:	4605      	mov	r5, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	d505      	bpl.n	8006a9c <__swrite+0x1e>
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	2302      	movs	r3, #2
 8006a96:	2200      	movs	r2, #0
 8006a98:	f000 f83c 	bl	8006b14 <_lseek_r>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	463b      	mov	r3, r7
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	f000 b853 	b.w	8006b5c <_write_r>

08006ab6 <__sseek>:
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	460c      	mov	r4, r1
 8006aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abe:	f000 f829 	bl	8006b14 <_lseek_r>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	bf15      	itete	ne
 8006ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ad2:	81a3      	strheq	r3, [r4, #12]
 8006ad4:	bf18      	it	ne
 8006ad6:	81a3      	strhne	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__sclose>:
 8006ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ade:	f000 b809 	b.w	8006af4 <_close_r>

08006ae2 <memset>:
 8006ae2:	4402      	add	r2, r0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d100      	bne.n	8006aec <memset+0xa>
 8006aea:	4770      	bx	lr
 8006aec:	f803 1b01 	strb.w	r1, [r3], #1
 8006af0:	e7f9      	b.n	8006ae6 <memset+0x4>
	...

08006af4 <_close_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d06      	ldr	r5, [pc, #24]	@ (8006b10 <_close_r+0x1c>)
 8006af8:	2300      	movs	r3, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	f7fa f811 	bl	8000b26 <_close>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_close_r+0x1a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_close_r+0x1a>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	200003fc 	.word	0x200003fc

08006b14 <_lseek_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	@ (8006b34 <_lseek_r+0x20>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f7fa f826 	bl	8000b74 <_lseek>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_lseek_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_lseek_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	200003fc 	.word	0x200003fc

08006b38 <_read_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	@ (8006b58 <_read_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7f9 ffb4 	bl	8000ab4 <_read>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_read_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_read_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	200003fc 	.word	0x200003fc

08006b5c <_write_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d07      	ldr	r5, [pc, #28]	@ (8006b7c <_write_r+0x20>)
 8006b60:	4604      	mov	r4, r0
 8006b62:	4608      	mov	r0, r1
 8006b64:	4611      	mov	r1, r2
 8006b66:	2200      	movs	r2, #0
 8006b68:	602a      	str	r2, [r5, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f7f9 ffbf 	bl	8000aee <_write>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_write_r+0x1e>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_write_r+0x1e>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	200003fc 	.word	0x200003fc

08006b80 <__errno>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	@ (8006b88 <__errno+0x8>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000044 	.word	0x20000044

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	@ (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 fdc6 	bl	8007730 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	080077f4 	.word	0x080077f4
 8006bc8:	080077f4 	.word	0x080077f4
 8006bcc:	080077f4 	.word	0x080077f4
 8006bd0:	080077f8 	.word	0x080077f8

08006bd4 <__retarget_lock_init_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_acquire_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <__retarget_lock_release_recursive>:
 8006bd8:	4770      	bx	lr

08006bda <memcpy>:
 8006bda:	440a      	add	r2, r1
 8006bdc:	4291      	cmp	r1, r2
 8006bde:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be2:	d100      	bne.n	8006be6 <memcpy+0xc>
 8006be4:	4770      	bx	lr
 8006be6:	b510      	push	{r4, lr}
 8006be8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf0:	4291      	cmp	r1, r2
 8006bf2:	d1f9      	bne.n	8006be8 <memcpy+0xe>
 8006bf4:	bd10      	pop	{r4, pc}
	...

08006bf8 <_free_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d041      	beq.n	8006c84 <_free_r+0x8c>
 8006c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c04:	1f0c      	subs	r4, r1, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bfb8      	it	lt
 8006c0a:	18e4      	addlt	r4, r4, r3
 8006c0c:	f000 f8e0 	bl	8006dd0 <__malloc_lock>
 8006c10:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <_free_r+0x90>)
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	b933      	cbnz	r3, 8006c24 <_free_r+0x2c>
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	6014      	str	r4, [r2, #0]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c20:	f000 b8dc 	b.w	8006ddc <__malloc_unlock>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d908      	bls.n	8006c3a <_free_r+0x42>
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	1821      	adds	r1, r4, r0
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	bf01      	itttt	eq
 8006c30:	6819      	ldreq	r1, [r3, #0]
 8006c32:	685b      	ldreq	r3, [r3, #4]
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	e7ed      	b.n	8006c16 <_free_r+0x1e>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b10b      	cbz	r3, 8006c44 <_free_r+0x4c>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d9fa      	bls.n	8006c3a <_free_r+0x42>
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	1850      	adds	r0, r2, r1
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d10b      	bne.n	8006c64 <_free_r+0x6c>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	4401      	add	r1, r0
 8006c50:	1850      	adds	r0, r2, r1
 8006c52:	4283      	cmp	r3, r0
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	d1e0      	bne.n	8006c1a <_free_r+0x22>
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	6053      	str	r3, [r2, #4]
 8006c5e:	4408      	add	r0, r1
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	e7da      	b.n	8006c1a <_free_r+0x22>
 8006c64:	d902      	bls.n	8006c6c <_free_r+0x74>
 8006c66:	230c      	movs	r3, #12
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	e7d6      	b.n	8006c1a <_free_r+0x22>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	1821      	adds	r1, r4, r0
 8006c70:	428b      	cmp	r3, r1
 8006c72:	bf04      	itt	eq
 8006c74:	6819      	ldreq	r1, [r3, #0]
 8006c76:	685b      	ldreq	r3, [r3, #4]
 8006c78:	6063      	str	r3, [r4, #4]
 8006c7a:	bf04      	itt	eq
 8006c7c:	1809      	addeq	r1, r1, r0
 8006c7e:	6021      	streq	r1, [r4, #0]
 8006c80:	6054      	str	r4, [r2, #4]
 8006c82:	e7ca      	b.n	8006c1a <_free_r+0x22>
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	bf00      	nop
 8006c88:	20000408 	.word	0x20000408

08006c8c <sbrk_aligned>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006ccc <sbrk_aligned+0x40>)
 8006c90:	460c      	mov	r4, r1
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	4605      	mov	r5, r0
 8006c96:	b911      	cbnz	r1, 8006c9e <sbrk_aligned+0x12>
 8006c98:	f000 fcb6 	bl	8007608 <_sbrk_r>
 8006c9c:	6030      	str	r0, [r6, #0]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f000 fcb1 	bl	8007608 <_sbrk_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d103      	bne.n	8006cb2 <sbrk_aligned+0x26>
 8006caa:	f04f 34ff 	mov.w	r4, #4294967295
 8006cae:	4620      	mov	r0, r4
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	1cc4      	adds	r4, r0, #3
 8006cb4:	f024 0403 	bic.w	r4, r4, #3
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d0f8      	beq.n	8006cae <sbrk_aligned+0x22>
 8006cbc:	1a21      	subs	r1, r4, r0
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fca2 	bl	8007608 <_sbrk_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d1f2      	bne.n	8006cae <sbrk_aligned+0x22>
 8006cc8:	e7ef      	b.n	8006caa <sbrk_aligned+0x1e>
 8006cca:	bf00      	nop
 8006ccc:	20000404 	.word	0x20000404

08006cd0 <_malloc_r>:
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	1ccd      	adds	r5, r1, #3
 8006cd6:	f025 0503 	bic.w	r5, r5, #3
 8006cda:	3508      	adds	r5, #8
 8006cdc:	2d0c      	cmp	r5, #12
 8006cde:	bf38      	it	cc
 8006ce0:	250c      	movcc	r5, #12
 8006ce2:	2d00      	cmp	r5, #0
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	db01      	blt.n	8006cec <_malloc_r+0x1c>
 8006ce8:	42a9      	cmp	r1, r5
 8006cea:	d904      	bls.n	8006cf6 <_malloc_r+0x26>
 8006cec:	230c      	movs	r3, #12
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006dcc <_malloc_r+0xfc>
 8006cfa:	f000 f869 	bl	8006dd0 <__malloc_lock>
 8006cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8006d02:	461c      	mov	r4, r3
 8006d04:	bb44      	cbnz	r4, 8006d58 <_malloc_r+0x88>
 8006d06:	4629      	mov	r1, r5
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff ffbf 	bl	8006c8c <sbrk_aligned>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	4604      	mov	r4, r0
 8006d12:	d158      	bne.n	8006dc6 <_malloc_r+0xf6>
 8006d14:	f8d8 4000 	ldr.w	r4, [r8]
 8006d18:	4627      	mov	r7, r4
 8006d1a:	2f00      	cmp	r7, #0
 8006d1c:	d143      	bne.n	8006da6 <_malloc_r+0xd6>
 8006d1e:	2c00      	cmp	r4, #0
 8006d20:	d04b      	beq.n	8006dba <_malloc_r+0xea>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	4639      	mov	r1, r7
 8006d26:	4630      	mov	r0, r6
 8006d28:	eb04 0903 	add.w	r9, r4, r3
 8006d2c:	f000 fc6c 	bl	8007608 <_sbrk_r>
 8006d30:	4581      	cmp	r9, r0
 8006d32:	d142      	bne.n	8006dba <_malloc_r+0xea>
 8006d34:	6821      	ldr	r1, [r4, #0]
 8006d36:	1a6d      	subs	r5, r5, r1
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff ffa6 	bl	8006c8c <sbrk_aligned>
 8006d40:	3001      	adds	r0, #1
 8006d42:	d03a      	beq.n	8006dba <_malloc_r+0xea>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	442b      	add	r3, r5
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	bb62      	cbnz	r2, 8006dac <_malloc_r+0xdc>
 8006d52:	f8c8 7000 	str.w	r7, [r8]
 8006d56:	e00f      	b.n	8006d78 <_malloc_r+0xa8>
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	1b52      	subs	r2, r2, r5
 8006d5c:	d420      	bmi.n	8006da0 <_malloc_r+0xd0>
 8006d5e:	2a0b      	cmp	r2, #11
 8006d60:	d917      	bls.n	8006d92 <_malloc_r+0xc2>
 8006d62:	1961      	adds	r1, r4, r5
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	6025      	str	r5, [r4, #0]
 8006d68:	bf18      	it	ne
 8006d6a:	6059      	strne	r1, [r3, #4]
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	bf08      	it	eq
 8006d70:	f8c8 1000 	streq.w	r1, [r8]
 8006d74:	5162      	str	r2, [r4, r5]
 8006d76:	604b      	str	r3, [r1, #4]
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 f82f 	bl	8006ddc <__malloc_unlock>
 8006d7e:	f104 000b 	add.w	r0, r4, #11
 8006d82:	1d23      	adds	r3, r4, #4
 8006d84:	f020 0007 	bic.w	r0, r0, #7
 8006d88:	1ac2      	subs	r2, r0, r3
 8006d8a:	bf1c      	itt	ne
 8006d8c:	1a1b      	subne	r3, r3, r0
 8006d8e:	50a3      	strne	r3, [r4, r2]
 8006d90:	e7af      	b.n	8006cf2 <_malloc_r+0x22>
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	bf0c      	ite	eq
 8006d98:	f8c8 2000 	streq.w	r2, [r8]
 8006d9c:	605a      	strne	r2, [r3, #4]
 8006d9e:	e7eb      	b.n	8006d78 <_malloc_r+0xa8>
 8006da0:	4623      	mov	r3, r4
 8006da2:	6864      	ldr	r4, [r4, #4]
 8006da4:	e7ae      	b.n	8006d04 <_malloc_r+0x34>
 8006da6:	463c      	mov	r4, r7
 8006da8:	687f      	ldr	r7, [r7, #4]
 8006daa:	e7b6      	b.n	8006d1a <_malloc_r+0x4a>
 8006dac:	461a      	mov	r2, r3
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d1fb      	bne.n	8006dac <_malloc_r+0xdc>
 8006db4:	2300      	movs	r3, #0
 8006db6:	6053      	str	r3, [r2, #4]
 8006db8:	e7de      	b.n	8006d78 <_malloc_r+0xa8>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f000 f80c 	bl	8006ddc <__malloc_unlock>
 8006dc4:	e794      	b.n	8006cf0 <_malloc_r+0x20>
 8006dc6:	6005      	str	r5, [r0, #0]
 8006dc8:	e7d6      	b.n	8006d78 <_malloc_r+0xa8>
 8006dca:	bf00      	nop
 8006dcc:	20000408 	.word	0x20000408

08006dd0 <__malloc_lock>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	@ (8006dd8 <__malloc_lock+0x8>)
 8006dd2:	f7ff bf00 	b.w	8006bd6 <__retarget_lock_acquire_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	20000400 	.word	0x20000400

08006ddc <__malloc_unlock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	@ (8006de4 <__malloc_unlock+0x8>)
 8006dde:	f7ff befb 	b.w	8006bd8 <__retarget_lock_release_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000400 	.word	0x20000400

08006de8 <__sfputc_r>:
 8006de8:	6893      	ldr	r3, [r2, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	b410      	push	{r4}
 8006df0:	6093      	str	r3, [r2, #8]
 8006df2:	da08      	bge.n	8006e06 <__sfputc_r+0x1e>
 8006df4:	6994      	ldr	r4, [r2, #24]
 8006df6:	42a3      	cmp	r3, r4
 8006df8:	db01      	blt.n	8006dfe <__sfputc_r+0x16>
 8006dfa:	290a      	cmp	r1, #10
 8006dfc:	d103      	bne.n	8006e06 <__sfputc_r+0x1e>
 8006dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e02:	f000 bb6d 	b.w	80074e0 <__swbuf_r>
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	1c58      	adds	r0, r3, #1
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	7019      	strb	r1, [r3, #0]
 8006e0e:	4608      	mov	r0, r1
 8006e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <__sfputs_r>:
 8006e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	18d5      	adds	r5, r2, r3
 8006e20:	42ac      	cmp	r4, r5
 8006e22:	d101      	bne.n	8006e28 <__sfputs_r+0x12>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e007      	b.n	8006e38 <__sfputs_r+0x22>
 8006e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ffda 	bl	8006de8 <__sfputc_r>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d1f3      	bne.n	8006e20 <__sfputs_r+0xa>
 8006e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e3c <_vfiprintf_r>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	460d      	mov	r5, r1
 8006e42:	b09d      	sub	sp, #116	@ 0x74
 8006e44:	4614      	mov	r4, r2
 8006e46:	4698      	mov	r8, r3
 8006e48:	4606      	mov	r6, r0
 8006e4a:	b118      	cbz	r0, 8006e54 <_vfiprintf_r+0x18>
 8006e4c:	6a03      	ldr	r3, [r0, #32]
 8006e4e:	b90b      	cbnz	r3, 8006e54 <_vfiprintf_r+0x18>
 8006e50:	f7ff fdbc 	bl	80069cc <__sinit>
 8006e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e56:	07d9      	lsls	r1, r3, #31
 8006e58:	d405      	bmi.n	8006e66 <_vfiprintf_r+0x2a>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	059a      	lsls	r2, r3, #22
 8006e5e:	d402      	bmi.n	8006e66 <_vfiprintf_r+0x2a>
 8006e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e62:	f7ff feb8 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 8006e66:	89ab      	ldrh	r3, [r5, #12]
 8006e68:	071b      	lsls	r3, r3, #28
 8006e6a:	d501      	bpl.n	8006e70 <_vfiprintf_r+0x34>
 8006e6c:	692b      	ldr	r3, [r5, #16]
 8006e6e:	b99b      	cbnz	r3, 8006e98 <_vfiprintf_r+0x5c>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 fb72 	bl	800755c <__swsetup_r>
 8006e78:	b170      	cbz	r0, 8006e98 <_vfiprintf_r+0x5c>
 8006e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e7c:	07dc      	lsls	r4, r3, #31
 8006e7e:	d504      	bpl.n	8006e8a <_vfiprintf_r+0x4e>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	b01d      	add	sp, #116	@ 0x74
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	89ab      	ldrh	r3, [r5, #12]
 8006e8c:	0598      	lsls	r0, r3, #22
 8006e8e:	d4f7      	bmi.n	8006e80 <_vfiprintf_r+0x44>
 8006e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e92:	f7ff fea1 	bl	8006bd8 <__retarget_lock_release_recursive>
 8006e96:	e7f3      	b.n	8006e80 <_vfiprintf_r+0x44>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ea6:	2330      	movs	r3, #48	@ 0x30
 8006ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007058 <_vfiprintf_r+0x21c>
 8006eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eb0:	f04f 0901 	mov.w	r9, #1
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	469a      	mov	sl, r3
 8006eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ebc:	b10a      	cbz	r2, 8006ec2 <_vfiprintf_r+0x86>
 8006ebe:	2a25      	cmp	r2, #37	@ 0x25
 8006ec0:	d1f9      	bne.n	8006eb6 <_vfiprintf_r+0x7a>
 8006ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec6:	d00b      	beq.n	8006ee0 <_vfiprintf_r+0xa4>
 8006ec8:	465b      	mov	r3, fp
 8006eca:	4622      	mov	r2, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ffa1 	bl	8006e16 <__sfputs_r>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f000 80a7 	beq.w	8007028 <_vfiprintf_r+0x1ec>
 8006eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006edc:	445a      	add	r2, fp
 8006ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 809f 	beq.w	8007028 <_vfiprintf_r+0x1ec>
 8006eea:	2300      	movs	r3, #0
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef4:	f10a 0a01 	add.w	sl, sl, #1
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	9307      	str	r3, [sp, #28]
 8006efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f02:	4654      	mov	r4, sl
 8006f04:	2205      	movs	r2, #5
 8006f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0a:	4853      	ldr	r0, [pc, #332]	@ (8007058 <_vfiprintf_r+0x21c>)
 8006f0c:	f7f9 f968 	bl	80001e0 <memchr>
 8006f10:	9a04      	ldr	r2, [sp, #16]
 8006f12:	b9d8      	cbnz	r0, 8006f4c <_vfiprintf_r+0x110>
 8006f14:	06d1      	lsls	r1, r2, #27
 8006f16:	bf44      	itt	mi
 8006f18:	2320      	movmi	r3, #32
 8006f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f1e:	0713      	lsls	r3, r2, #28
 8006f20:	bf44      	itt	mi
 8006f22:	232b      	movmi	r3, #43	@ 0x2b
 8006f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f28:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f2e:	d015      	beq.n	8006f5c <_vfiprintf_r+0x120>
 8006f30:	9a07      	ldr	r2, [sp, #28]
 8006f32:	4654      	mov	r4, sl
 8006f34:	2000      	movs	r0, #0
 8006f36:	f04f 0c0a 	mov.w	ip, #10
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f40:	3b30      	subs	r3, #48	@ 0x30
 8006f42:	2b09      	cmp	r3, #9
 8006f44:	d94b      	bls.n	8006fde <_vfiprintf_r+0x1a2>
 8006f46:	b1b0      	cbz	r0, 8006f76 <_vfiprintf_r+0x13a>
 8006f48:	9207      	str	r2, [sp, #28]
 8006f4a:	e014      	b.n	8006f76 <_vfiprintf_r+0x13a>
 8006f4c:	eba0 0308 	sub.w	r3, r0, r8
 8006f50:	fa09 f303 	lsl.w	r3, r9, r3
 8006f54:	4313      	orrs	r3, r2
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	46a2      	mov	sl, r4
 8006f5a:	e7d2      	b.n	8006f02 <_vfiprintf_r+0xc6>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	1d19      	adds	r1, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	9103      	str	r1, [sp, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfbb      	ittet	lt
 8006f68:	425b      	neglt	r3, r3
 8006f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f6e:	9307      	strge	r3, [sp, #28]
 8006f70:	9307      	strlt	r3, [sp, #28]
 8006f72:	bfb8      	it	lt
 8006f74:	9204      	strlt	r2, [sp, #16]
 8006f76:	7823      	ldrb	r3, [r4, #0]
 8006f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f7a:	d10a      	bne.n	8006f92 <_vfiprintf_r+0x156>
 8006f7c:	7863      	ldrb	r3, [r4, #1]
 8006f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f80:	d132      	bne.n	8006fe8 <_vfiprintf_r+0x1ac>
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	9203      	str	r2, [sp, #12]
 8006f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f8e:	3402      	adds	r4, #2
 8006f90:	9305      	str	r3, [sp, #20]
 8006f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007068 <_vfiprintf_r+0x22c>
 8006f96:	7821      	ldrb	r1, [r4, #0]
 8006f98:	2203      	movs	r2, #3
 8006f9a:	4650      	mov	r0, sl
 8006f9c:	f7f9 f920 	bl	80001e0 <memchr>
 8006fa0:	b138      	cbz	r0, 8006fb2 <_vfiprintf_r+0x176>
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	eba0 000a 	sub.w	r0, r0, sl
 8006fa8:	2240      	movs	r2, #64	@ 0x40
 8006faa:	4082      	lsls	r2, r0
 8006fac:	4313      	orrs	r3, r2
 8006fae:	3401      	adds	r4, #1
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb6:	4829      	ldr	r0, [pc, #164]	@ (800705c <_vfiprintf_r+0x220>)
 8006fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fbc:	2206      	movs	r2, #6
 8006fbe:	f7f9 f90f 	bl	80001e0 <memchr>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d03f      	beq.n	8007046 <_vfiprintf_r+0x20a>
 8006fc6:	4b26      	ldr	r3, [pc, #152]	@ (8007060 <_vfiprintf_r+0x224>)
 8006fc8:	bb1b      	cbnz	r3, 8007012 <_vfiprintf_r+0x1d6>
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	3307      	adds	r3, #7
 8006fce:	f023 0307 	bic.w	r3, r3, #7
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd8:	443b      	add	r3, r7
 8006fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fdc:	e76a      	b.n	8006eb4 <_vfiprintf_r+0x78>
 8006fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	e7a8      	b.n	8006f3a <_vfiprintf_r+0xfe>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	3401      	adds	r4, #1
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f04f 0c0a 	mov.w	ip, #10
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ffa:	3a30      	subs	r2, #48	@ 0x30
 8006ffc:	2a09      	cmp	r2, #9
 8006ffe:	d903      	bls.n	8007008 <_vfiprintf_r+0x1cc>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0c6      	beq.n	8006f92 <_vfiprintf_r+0x156>
 8007004:	9105      	str	r1, [sp, #20]
 8007006:	e7c4      	b.n	8006f92 <_vfiprintf_r+0x156>
 8007008:	fb0c 2101 	mla	r1, ip, r1, r2
 800700c:	4604      	mov	r4, r0
 800700e:	2301      	movs	r3, #1
 8007010:	e7f0      	b.n	8006ff4 <_vfiprintf_r+0x1b8>
 8007012:	ab03      	add	r3, sp, #12
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	462a      	mov	r2, r5
 8007018:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <_vfiprintf_r+0x228>)
 800701a:	a904      	add	r1, sp, #16
 800701c:	4630      	mov	r0, r6
 800701e:	f3af 8000 	nop.w
 8007022:	4607      	mov	r7, r0
 8007024:	1c78      	adds	r0, r7, #1
 8007026:	d1d6      	bne.n	8006fd6 <_vfiprintf_r+0x19a>
 8007028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800702a:	07d9      	lsls	r1, r3, #31
 800702c:	d405      	bmi.n	800703a <_vfiprintf_r+0x1fe>
 800702e:	89ab      	ldrh	r3, [r5, #12]
 8007030:	059a      	lsls	r2, r3, #22
 8007032:	d402      	bmi.n	800703a <_vfiprintf_r+0x1fe>
 8007034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007036:	f7ff fdcf 	bl	8006bd8 <__retarget_lock_release_recursive>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	065b      	lsls	r3, r3, #25
 800703e:	f53f af1f 	bmi.w	8006e80 <_vfiprintf_r+0x44>
 8007042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007044:	e71e      	b.n	8006e84 <_vfiprintf_r+0x48>
 8007046:	ab03      	add	r3, sp, #12
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	462a      	mov	r2, r5
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <_vfiprintf_r+0x228>)
 800704e:	a904      	add	r1, sp, #16
 8007050:	4630      	mov	r0, r6
 8007052:	f000 f879 	bl	8007148 <_printf_i>
 8007056:	e7e4      	b.n	8007022 <_vfiprintf_r+0x1e6>
 8007058:	080077b8 	.word	0x080077b8
 800705c:	080077c2 	.word	0x080077c2
 8007060:	00000000 	.word	0x00000000
 8007064:	08006e17 	.word	0x08006e17
 8007068:	080077be 	.word	0x080077be

0800706c <_printf_common>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	4616      	mov	r6, r2
 8007072:	4698      	mov	r8, r3
 8007074:	688a      	ldr	r2, [r1, #8]
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707c:	4293      	cmp	r3, r2
 800707e:	bfb8      	it	lt
 8007080:	4613      	movlt	r3, r2
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007088:	4607      	mov	r7, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b10a      	cbz	r2, 8007092 <_printf_common+0x26>
 800708e:	3301      	adds	r3, #1
 8007090:	6033      	str	r3, [r6, #0]
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	0699      	lsls	r1, r3, #26
 8007096:	bf42      	ittt	mi
 8007098:	6833      	ldrmi	r3, [r6, #0]
 800709a:	3302      	addmi	r3, #2
 800709c:	6033      	strmi	r3, [r6, #0]
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	f015 0506 	ands.w	r5, r5, #6
 80070a4:	d106      	bne.n	80070b4 <_printf_common+0x48>
 80070a6:	f104 0a19 	add.w	sl, r4, #25
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	6832      	ldr	r2, [r6, #0]
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	dc26      	bgt.n	8007102 <_printf_common+0x96>
 80070b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	3b00      	subs	r3, #0
 80070bc:	bf18      	it	ne
 80070be:	2301      	movne	r3, #1
 80070c0:	0692      	lsls	r2, r2, #26
 80070c2:	d42b      	bmi.n	800711c <_printf_common+0xb0>
 80070c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070c8:	4641      	mov	r1, r8
 80070ca:	4638      	mov	r0, r7
 80070cc:	47c8      	blx	r9
 80070ce:	3001      	adds	r0, #1
 80070d0:	d01e      	beq.n	8007110 <_printf_common+0xa4>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	f003 0306 	and.w	r3, r3, #6
 80070da:	2b04      	cmp	r3, #4
 80070dc:	bf02      	ittt	eq
 80070de:	68e5      	ldreq	r5, [r4, #12]
 80070e0:	6833      	ldreq	r3, [r6, #0]
 80070e2:	1aed      	subeq	r5, r5, r3
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	bf0c      	ite	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	2500      	movne	r5, #0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfc4      	itt	gt
 80070f2:	1a9b      	subgt	r3, r3, r2
 80070f4:	18ed      	addgt	r5, r5, r3
 80070f6:	2600      	movs	r6, #0
 80070f8:	341a      	adds	r4, #26
 80070fa:	42b5      	cmp	r5, r6
 80070fc:	d11a      	bne.n	8007134 <_printf_common+0xc8>
 80070fe:	2000      	movs	r0, #0
 8007100:	e008      	b.n	8007114 <_printf_common+0xa8>
 8007102:	2301      	movs	r3, #1
 8007104:	4652      	mov	r2, sl
 8007106:	4641      	mov	r1, r8
 8007108:	4638      	mov	r0, r7
 800710a:	47c8      	blx	r9
 800710c:	3001      	adds	r0, #1
 800710e:	d103      	bne.n	8007118 <_printf_common+0xac>
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	3501      	adds	r5, #1
 800711a:	e7c6      	b.n	80070aa <_printf_common+0x3e>
 800711c:	18e1      	adds	r1, r4, r3
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	2030      	movs	r0, #48	@ 0x30
 8007122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007126:	4422      	add	r2, r4
 8007128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800712c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007130:	3302      	adds	r3, #2
 8007132:	e7c7      	b.n	80070c4 <_printf_common+0x58>
 8007134:	2301      	movs	r3, #1
 8007136:	4622      	mov	r2, r4
 8007138:	4641      	mov	r1, r8
 800713a:	4638      	mov	r0, r7
 800713c:	47c8      	blx	r9
 800713e:	3001      	adds	r0, #1
 8007140:	d0e6      	beq.n	8007110 <_printf_common+0xa4>
 8007142:	3601      	adds	r6, #1
 8007144:	e7d9      	b.n	80070fa <_printf_common+0x8e>
	...

08007148 <_printf_i>:
 8007148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	7e0f      	ldrb	r7, [r1, #24]
 800714e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007150:	2f78      	cmp	r7, #120	@ 0x78
 8007152:	4691      	mov	r9, r2
 8007154:	4680      	mov	r8, r0
 8007156:	460c      	mov	r4, r1
 8007158:	469a      	mov	sl, r3
 800715a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800715e:	d807      	bhi.n	8007170 <_printf_i+0x28>
 8007160:	2f62      	cmp	r7, #98	@ 0x62
 8007162:	d80a      	bhi.n	800717a <_printf_i+0x32>
 8007164:	2f00      	cmp	r7, #0
 8007166:	f000 80d2 	beq.w	800730e <_printf_i+0x1c6>
 800716a:	2f58      	cmp	r7, #88	@ 0x58
 800716c:	f000 80b9 	beq.w	80072e2 <_printf_i+0x19a>
 8007170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007178:	e03a      	b.n	80071f0 <_printf_i+0xa8>
 800717a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800717e:	2b15      	cmp	r3, #21
 8007180:	d8f6      	bhi.n	8007170 <_printf_i+0x28>
 8007182:	a101      	add	r1, pc, #4	@ (adr r1, 8007188 <_printf_i+0x40>)
 8007184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007188:	080071e1 	.word	0x080071e1
 800718c:	080071f5 	.word	0x080071f5
 8007190:	08007171 	.word	0x08007171
 8007194:	08007171 	.word	0x08007171
 8007198:	08007171 	.word	0x08007171
 800719c:	08007171 	.word	0x08007171
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	08007171 	.word	0x08007171
 80071a8:	08007171 	.word	0x08007171
 80071ac:	08007171 	.word	0x08007171
 80071b0:	08007171 	.word	0x08007171
 80071b4:	080072f5 	.word	0x080072f5
 80071b8:	0800721f 	.word	0x0800721f
 80071bc:	080072af 	.word	0x080072af
 80071c0:	08007171 	.word	0x08007171
 80071c4:	08007171 	.word	0x08007171
 80071c8:	08007317 	.word	0x08007317
 80071cc:	08007171 	.word	0x08007171
 80071d0:	0800721f 	.word	0x0800721f
 80071d4:	08007171 	.word	0x08007171
 80071d8:	08007171 	.word	0x08007171
 80071dc:	080072b7 	.word	0x080072b7
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6032      	str	r2, [r6, #0]
 80071e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071f0:	2301      	movs	r3, #1
 80071f2:	e09d      	b.n	8007330 <_printf_i+0x1e8>
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	6031      	str	r1, [r6, #0]
 80071fc:	0606      	lsls	r6, r0, #24
 80071fe:	d501      	bpl.n	8007204 <_printf_i+0xbc>
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	e003      	b.n	800720c <_printf_i+0xc4>
 8007204:	0645      	lsls	r5, r0, #25
 8007206:	d5fb      	bpl.n	8007200 <_printf_i+0xb8>
 8007208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800720c:	2d00      	cmp	r5, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xd0>
 8007210:	232d      	movs	r3, #45	@ 0x2d
 8007212:	426d      	negs	r5, r5
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007218:	4859      	ldr	r0, [pc, #356]	@ (8007380 <_printf_i+0x238>)
 800721a:	230a      	movs	r3, #10
 800721c:	e011      	b.n	8007242 <_printf_i+0xfa>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	0608      	lsls	r0, r1, #24
 8007224:	f853 5b04 	ldr.w	r5, [r3], #4
 8007228:	d402      	bmi.n	8007230 <_printf_i+0xe8>
 800722a:	0649      	lsls	r1, r1, #25
 800722c:	bf48      	it	mi
 800722e:	b2ad      	uxthmi	r5, r5
 8007230:	2f6f      	cmp	r7, #111	@ 0x6f
 8007232:	4853      	ldr	r0, [pc, #332]	@ (8007380 <_printf_i+0x238>)
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	bf14      	ite	ne
 8007238:	230a      	movne	r3, #10
 800723a:	2308      	moveq	r3, #8
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007242:	6866      	ldr	r6, [r4, #4]
 8007244:	60a6      	str	r6, [r4, #8]
 8007246:	2e00      	cmp	r6, #0
 8007248:	bfa2      	ittt	ge
 800724a:	6821      	ldrge	r1, [r4, #0]
 800724c:	f021 0104 	bicge.w	r1, r1, #4
 8007250:	6021      	strge	r1, [r4, #0]
 8007252:	b90d      	cbnz	r5, 8007258 <_printf_i+0x110>
 8007254:	2e00      	cmp	r6, #0
 8007256:	d04b      	beq.n	80072f0 <_printf_i+0x1a8>
 8007258:	4616      	mov	r6, r2
 800725a:	fbb5 f1f3 	udiv	r1, r5, r3
 800725e:	fb03 5711 	mls	r7, r3, r1, r5
 8007262:	5dc7      	ldrb	r7, [r0, r7]
 8007264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007268:	462f      	mov	r7, r5
 800726a:	42bb      	cmp	r3, r7
 800726c:	460d      	mov	r5, r1
 800726e:	d9f4      	bls.n	800725a <_printf_i+0x112>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10b      	bne.n	800728c <_printf_i+0x144>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07df      	lsls	r7, r3, #31
 8007278:	d508      	bpl.n	800728c <_printf_i+0x144>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	bfde      	ittt	le
 8007282:	2330      	movle	r3, #48	@ 0x30
 8007284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800728c:	1b92      	subs	r2, r2, r6
 800728e:	6122      	str	r2, [r4, #16]
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	464b      	mov	r3, r9
 8007296:	aa03      	add	r2, sp, #12
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fee6 	bl	800706c <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d14a      	bne.n	800733a <_printf_i+0x1f2>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f043 0320 	orr.w	r3, r3, #32
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	4833      	ldr	r0, [pc, #204]	@ (8007384 <_printf_i+0x23c>)
 80072b8:	2778      	movs	r7, #120	@ 0x78
 80072ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6831      	ldr	r1, [r6, #0]
 80072c2:	061f      	lsls	r7, r3, #24
 80072c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0x188>
 80072ca:	065f      	lsls	r7, r3, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2ad      	uxthmi	r5, r5
 80072d0:	6031      	str	r1, [r6, #0]
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	bf44      	itt	mi
 80072d6:	f043 0320 	orrmi.w	r3, r3, #32
 80072da:	6023      	strmi	r3, [r4, #0]
 80072dc:	b11d      	cbz	r5, 80072e6 <_printf_i+0x19e>
 80072de:	2310      	movs	r3, #16
 80072e0:	e7ac      	b.n	800723c <_printf_i+0xf4>
 80072e2:	4827      	ldr	r0, [pc, #156]	@ (8007380 <_printf_i+0x238>)
 80072e4:	e7e9      	b.n	80072ba <_printf_i+0x172>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	f023 0320 	bic.w	r3, r3, #32
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	e7f6      	b.n	80072de <_printf_i+0x196>
 80072f0:	4616      	mov	r6, r2
 80072f2:	e7bd      	b.n	8007270 <_printf_i+0x128>
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	6825      	ldr	r5, [r4, #0]
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6030      	str	r0, [r6, #0]
 80072fe:	062e      	lsls	r6, r5, #24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d501      	bpl.n	8007308 <_printf_i+0x1c0>
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	e002      	b.n	800730e <_printf_i+0x1c6>
 8007308:	0668      	lsls	r0, r5, #25
 800730a:	d5fb      	bpl.n	8007304 <_printf_i+0x1bc>
 800730c:	8019      	strh	r1, [r3, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	4616      	mov	r6, r2
 8007314:	e7bc      	b.n	8007290 <_printf_i+0x148>
 8007316:	6833      	ldr	r3, [r6, #0]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	6032      	str	r2, [r6, #0]
 800731c:	681e      	ldr	r6, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	2100      	movs	r1, #0
 8007322:	4630      	mov	r0, r6
 8007324:	f7f8 ff5c 	bl	80001e0 <memchr>
 8007328:	b108      	cbz	r0, 800732e <_printf_i+0x1e6>
 800732a:	1b80      	subs	r0, r0, r6
 800732c:	6060      	str	r0, [r4, #4]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007338:	e7aa      	b.n	8007290 <_printf_i+0x148>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	4632      	mov	r2, r6
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d0ad      	beq.n	80072a4 <_printf_i+0x15c>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d413      	bmi.n	8007376 <_printf_i+0x22e>
 800734e:	68e0      	ldr	r0, [r4, #12]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	4298      	cmp	r0, r3
 8007354:	bfb8      	it	lt
 8007356:	4618      	movlt	r0, r3
 8007358:	e7a6      	b.n	80072a8 <_printf_i+0x160>
 800735a:	2301      	movs	r3, #1
 800735c:	4632      	mov	r2, r6
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d09d      	beq.n	80072a4 <_printf_i+0x15c>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf2      	bgt.n	800735a <_printf_i+0x212>
 8007374:	e7eb      	b.n	800734e <_printf_i+0x206>
 8007376:	2500      	movs	r5, #0
 8007378:	f104 0619 	add.w	r6, r4, #25
 800737c:	e7f5      	b.n	800736a <_printf_i+0x222>
 800737e:	bf00      	nop
 8007380:	080077c9 	.word	0x080077c9
 8007384:	080077da 	.word	0x080077da

08007388 <__sflush_r>:
 8007388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	0716      	lsls	r6, r2, #28
 8007392:	4605      	mov	r5, r0
 8007394:	460c      	mov	r4, r1
 8007396:	d454      	bmi.n	8007442 <__sflush_r+0xba>
 8007398:	684b      	ldr	r3, [r1, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dc02      	bgt.n	80073a4 <__sflush_r+0x1c>
 800739e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dd48      	ble.n	8007436 <__sflush_r+0xae>
 80073a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d045      	beq.n	8007436 <__sflush_r+0xae>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073b0:	682f      	ldr	r7, [r5, #0]
 80073b2:	6a21      	ldr	r1, [r4, #32]
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	d030      	beq.n	800741a <__sflush_r+0x92>
 80073b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	0759      	lsls	r1, r3, #29
 80073be:	d505      	bpl.n	80073cc <__sflush_r+0x44>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073c6:	b10b      	cbz	r3, 80073cc <__sflush_r+0x44>
 80073c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	2300      	movs	r3, #0
 80073ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b0      	blx	r6
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	d106      	bne.n	80073ea <__sflush_r+0x62>
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	291d      	cmp	r1, #29
 80073e0:	d82b      	bhi.n	800743a <__sflush_r+0xb2>
 80073e2:	4a2a      	ldr	r2, [pc, #168]	@ (800748c <__sflush_r+0x104>)
 80073e4:	410a      	asrs	r2, r1
 80073e6:	07d6      	lsls	r6, r2, #31
 80073e8:	d427      	bmi.n	800743a <__sflush_r+0xb2>
 80073ea:	2200      	movs	r2, #0
 80073ec:	6062      	str	r2, [r4, #4]
 80073ee:	04d9      	lsls	r1, r3, #19
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	d504      	bpl.n	8007400 <__sflush_r+0x78>
 80073f6:	1c42      	adds	r2, r0, #1
 80073f8:	d101      	bne.n	80073fe <__sflush_r+0x76>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	b903      	cbnz	r3, 8007400 <__sflush_r+0x78>
 80073fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007402:	602f      	str	r7, [r5, #0]
 8007404:	b1b9      	cbz	r1, 8007436 <__sflush_r+0xae>
 8007406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800740a:	4299      	cmp	r1, r3
 800740c:	d002      	beq.n	8007414 <__sflush_r+0x8c>
 800740e:	4628      	mov	r0, r5
 8007410:	f7ff fbf2 	bl	8006bf8 <_free_r>
 8007414:	2300      	movs	r3, #0
 8007416:	6363      	str	r3, [r4, #52]	@ 0x34
 8007418:	e00d      	b.n	8007436 <__sflush_r+0xae>
 800741a:	2301      	movs	r3, #1
 800741c:	4628      	mov	r0, r5
 800741e:	47b0      	blx	r6
 8007420:	4602      	mov	r2, r0
 8007422:	1c50      	adds	r0, r2, #1
 8007424:	d1c9      	bne.n	80073ba <__sflush_r+0x32>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0c6      	beq.n	80073ba <__sflush_r+0x32>
 800742c:	2b1d      	cmp	r3, #29
 800742e:	d001      	beq.n	8007434 <__sflush_r+0xac>
 8007430:	2b16      	cmp	r3, #22
 8007432:	d11e      	bne.n	8007472 <__sflush_r+0xea>
 8007434:	602f      	str	r7, [r5, #0]
 8007436:	2000      	movs	r0, #0
 8007438:	e022      	b.n	8007480 <__sflush_r+0xf8>
 800743a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743e:	b21b      	sxth	r3, r3
 8007440:	e01b      	b.n	800747a <__sflush_r+0xf2>
 8007442:	690f      	ldr	r7, [r1, #16]
 8007444:	2f00      	cmp	r7, #0
 8007446:	d0f6      	beq.n	8007436 <__sflush_r+0xae>
 8007448:	0793      	lsls	r3, r2, #30
 800744a:	680e      	ldr	r6, [r1, #0]
 800744c:	bf08      	it	eq
 800744e:	694b      	ldreq	r3, [r1, #20]
 8007450:	600f      	str	r7, [r1, #0]
 8007452:	bf18      	it	ne
 8007454:	2300      	movne	r3, #0
 8007456:	eba6 0807 	sub.w	r8, r6, r7
 800745a:	608b      	str	r3, [r1, #8]
 800745c:	f1b8 0f00 	cmp.w	r8, #0
 8007460:	dde9      	ble.n	8007436 <__sflush_r+0xae>
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007466:	4643      	mov	r3, r8
 8007468:	463a      	mov	r2, r7
 800746a:	4628      	mov	r0, r5
 800746c:	47b0      	blx	r6
 800746e:	2800      	cmp	r0, #0
 8007470:	dc08      	bgt.n	8007484 <__sflush_r+0xfc>
 8007472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	4407      	add	r7, r0
 8007486:	eba8 0800 	sub.w	r8, r8, r0
 800748a:	e7e7      	b.n	800745c <__sflush_r+0xd4>
 800748c:	dfbffffe 	.word	0xdfbffffe

08007490 <_fflush_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	4605      	mov	r5, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b913      	cbnz	r3, 80074a0 <_fflush_r+0x10>
 800749a:	2500      	movs	r5, #0
 800749c:	4628      	mov	r0, r5
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	b118      	cbz	r0, 80074aa <_fflush_r+0x1a>
 80074a2:	6a03      	ldr	r3, [r0, #32]
 80074a4:	b90b      	cbnz	r3, 80074aa <_fflush_r+0x1a>
 80074a6:	f7ff fa91 	bl	80069cc <__sinit>
 80074aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f3      	beq.n	800749a <_fflush_r+0xa>
 80074b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074b4:	07d0      	lsls	r0, r2, #31
 80074b6:	d404      	bmi.n	80074c2 <_fflush_r+0x32>
 80074b8:	0599      	lsls	r1, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_fflush_r+0x32>
 80074bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074be:	f7ff fb8a 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 80074c2:	4628      	mov	r0, r5
 80074c4:	4621      	mov	r1, r4
 80074c6:	f7ff ff5f 	bl	8007388 <__sflush_r>
 80074ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074cc:	07da      	lsls	r2, r3, #31
 80074ce:	4605      	mov	r5, r0
 80074d0:	d4e4      	bmi.n	800749c <_fflush_r+0xc>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	059b      	lsls	r3, r3, #22
 80074d6:	d4e1      	bmi.n	800749c <_fflush_r+0xc>
 80074d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074da:	f7ff fb7d 	bl	8006bd8 <__retarget_lock_release_recursive>
 80074de:	e7dd      	b.n	800749c <_fflush_r+0xc>

080074e0 <__swbuf_r>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	460e      	mov	r6, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	4605      	mov	r5, r0
 80074e8:	b118      	cbz	r0, 80074f2 <__swbuf_r+0x12>
 80074ea:	6a03      	ldr	r3, [r0, #32]
 80074ec:	b90b      	cbnz	r3, 80074f2 <__swbuf_r+0x12>
 80074ee:	f7ff fa6d 	bl	80069cc <__sinit>
 80074f2:	69a3      	ldr	r3, [r4, #24]
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	071a      	lsls	r2, r3, #28
 80074fa:	d501      	bpl.n	8007500 <__swbuf_r+0x20>
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	b943      	cbnz	r3, 8007512 <__swbuf_r+0x32>
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	f000 f82a 	bl	800755c <__swsetup_r>
 8007508:	b118      	cbz	r0, 8007512 <__swbuf_r+0x32>
 800750a:	f04f 37ff 	mov.w	r7, #4294967295
 800750e:	4638      	mov	r0, r7
 8007510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	1a98      	subs	r0, r3, r2
 8007518:	6963      	ldr	r3, [r4, #20]
 800751a:	b2f6      	uxtb	r6, r6
 800751c:	4283      	cmp	r3, r0
 800751e:	4637      	mov	r7, r6
 8007520:	dc05      	bgt.n	800752e <__swbuf_r+0x4e>
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff ffb3 	bl	8007490 <_fflush_r>
 800752a:	2800      	cmp	r0, #0
 800752c:	d1ed      	bne.n	800750a <__swbuf_r+0x2a>
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	3b01      	subs	r3, #1
 8007532:	60a3      	str	r3, [r4, #8]
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	6022      	str	r2, [r4, #0]
 800753a:	701e      	strb	r6, [r3, #0]
 800753c:	6962      	ldr	r2, [r4, #20]
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	429a      	cmp	r2, r3
 8007542:	d004      	beq.n	800754e <__swbuf_r+0x6e>
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	07db      	lsls	r3, r3, #31
 8007548:	d5e1      	bpl.n	800750e <__swbuf_r+0x2e>
 800754a:	2e0a      	cmp	r6, #10
 800754c:	d1df      	bne.n	800750e <__swbuf_r+0x2e>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f7ff ff9d 	bl	8007490 <_fflush_r>
 8007556:	2800      	cmp	r0, #0
 8007558:	d0d9      	beq.n	800750e <__swbuf_r+0x2e>
 800755a:	e7d6      	b.n	800750a <__swbuf_r+0x2a>

0800755c <__swsetup_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4b29      	ldr	r3, [pc, #164]	@ (8007604 <__swsetup_r+0xa8>)
 8007560:	4605      	mov	r5, r0
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	460c      	mov	r4, r1
 8007566:	b118      	cbz	r0, 8007570 <__swsetup_r+0x14>
 8007568:	6a03      	ldr	r3, [r0, #32]
 800756a:	b90b      	cbnz	r3, 8007570 <__swsetup_r+0x14>
 800756c:	f7ff fa2e 	bl	80069cc <__sinit>
 8007570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007574:	0719      	lsls	r1, r3, #28
 8007576:	d422      	bmi.n	80075be <__swsetup_r+0x62>
 8007578:	06da      	lsls	r2, r3, #27
 800757a:	d407      	bmi.n	800758c <__swsetup_r+0x30>
 800757c:	2209      	movs	r2, #9
 800757e:	602a      	str	r2, [r5, #0]
 8007580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	e033      	b.n	80075f4 <__swsetup_r+0x98>
 800758c:	0758      	lsls	r0, r3, #29
 800758e:	d512      	bpl.n	80075b6 <__swsetup_r+0x5a>
 8007590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007592:	b141      	cbz	r1, 80075a6 <__swsetup_r+0x4a>
 8007594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007598:	4299      	cmp	r1, r3
 800759a:	d002      	beq.n	80075a2 <__swsetup_r+0x46>
 800759c:	4628      	mov	r0, r5
 800759e:	f7ff fb2b 	bl	8006bf8 <_free_r>
 80075a2:	2300      	movs	r3, #0
 80075a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	2300      	movs	r3, #0
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f043 0308 	orr.w	r3, r3, #8
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	b94b      	cbnz	r3, 80075d6 <__swsetup_r+0x7a>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075cc:	d003      	beq.n	80075d6 <__swsetup_r+0x7a>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f84f 	bl	8007674 <__smakebuf_r>
 80075d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075da:	f013 0201 	ands.w	r2, r3, #1
 80075de:	d00a      	beq.n	80075f6 <__swsetup_r+0x9a>
 80075e0:	2200      	movs	r2, #0
 80075e2:	60a2      	str	r2, [r4, #8]
 80075e4:	6962      	ldr	r2, [r4, #20]
 80075e6:	4252      	negs	r2, r2
 80075e8:	61a2      	str	r2, [r4, #24]
 80075ea:	6922      	ldr	r2, [r4, #16]
 80075ec:	b942      	cbnz	r2, 8007600 <__swsetup_r+0xa4>
 80075ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075f2:	d1c5      	bne.n	8007580 <__swsetup_r+0x24>
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
 80075f6:	0799      	lsls	r1, r3, #30
 80075f8:	bf58      	it	pl
 80075fa:	6962      	ldrpl	r2, [r4, #20]
 80075fc:	60a2      	str	r2, [r4, #8]
 80075fe:	e7f4      	b.n	80075ea <__swsetup_r+0x8e>
 8007600:	2000      	movs	r0, #0
 8007602:	e7f7      	b.n	80075f4 <__swsetup_r+0x98>
 8007604:	20000044 	.word	0x20000044

08007608 <_sbrk_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d06      	ldr	r5, [pc, #24]	@ (8007624 <_sbrk_r+0x1c>)
 800760c:	2300      	movs	r3, #0
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7f9 fabc 	bl	8000b90 <_sbrk>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_sbrk_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_sbrk_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	200003fc 	.word	0x200003fc

08007628 <__swhatbuf_r>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	460c      	mov	r4, r1
 800762c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007630:	2900      	cmp	r1, #0
 8007632:	b096      	sub	sp, #88	@ 0x58
 8007634:	4615      	mov	r5, r2
 8007636:	461e      	mov	r6, r3
 8007638:	da0d      	bge.n	8007656 <__swhatbuf_r+0x2e>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	bf14      	ite	ne
 8007646:	2340      	movne	r3, #64	@ 0x40
 8007648:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800764c:	2000      	movs	r0, #0
 800764e:	6031      	str	r1, [r6, #0]
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	b016      	add	sp, #88	@ 0x58
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	466a      	mov	r2, sp
 8007658:	f000 f848 	bl	80076ec <_fstat_r>
 800765c:	2800      	cmp	r0, #0
 800765e:	dbec      	blt.n	800763a <__swhatbuf_r+0x12>
 8007660:	9901      	ldr	r1, [sp, #4]
 8007662:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007666:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800766a:	4259      	negs	r1, r3
 800766c:	4159      	adcs	r1, r3
 800766e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007672:	e7eb      	b.n	800764c <__swhatbuf_r+0x24>

08007674 <__smakebuf_r>:
 8007674:	898b      	ldrh	r3, [r1, #12]
 8007676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007678:	079d      	lsls	r5, r3, #30
 800767a:	4606      	mov	r6, r0
 800767c:	460c      	mov	r4, r1
 800767e:	d507      	bpl.n	8007690 <__smakebuf_r+0x1c>
 8007680:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	2301      	movs	r3, #1
 800768a:	6163      	str	r3, [r4, #20]
 800768c:	b003      	add	sp, #12
 800768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007690:	ab01      	add	r3, sp, #4
 8007692:	466a      	mov	r2, sp
 8007694:	f7ff ffc8 	bl	8007628 <__swhatbuf_r>
 8007698:	9f00      	ldr	r7, [sp, #0]
 800769a:	4605      	mov	r5, r0
 800769c:	4639      	mov	r1, r7
 800769e:	4630      	mov	r0, r6
 80076a0:	f7ff fb16 	bl	8006cd0 <_malloc_r>
 80076a4:	b948      	cbnz	r0, 80076ba <__smakebuf_r+0x46>
 80076a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076aa:	059a      	lsls	r2, r3, #22
 80076ac:	d4ee      	bmi.n	800768c <__smakebuf_r+0x18>
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	f043 0302 	orr.w	r3, r3, #2
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	e7e2      	b.n	8007680 <__smakebuf_r+0xc>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	6020      	str	r0, [r4, #0]
 80076be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	9b01      	ldr	r3, [sp, #4]
 80076c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ca:	b15b      	cbz	r3, 80076e4 <__smakebuf_r+0x70>
 80076cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d0:	4630      	mov	r0, r6
 80076d2:	f000 f81d 	bl	8007710 <_isatty_r>
 80076d6:	b128      	cbz	r0, 80076e4 <__smakebuf_r+0x70>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	431d      	orrs	r5, r3
 80076e8:	81a5      	strh	r5, [r4, #12]
 80076ea:	e7cf      	b.n	800768c <__smakebuf_r+0x18>

080076ec <_fstat_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4d07      	ldr	r5, [pc, #28]	@ (800770c <_fstat_r+0x20>)
 80076f0:	2300      	movs	r3, #0
 80076f2:	4604      	mov	r4, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	f7f9 fa20 	bl	8000b3e <_fstat>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d102      	bne.n	8007708 <_fstat_r+0x1c>
 8007702:	682b      	ldr	r3, [r5, #0]
 8007704:	b103      	cbz	r3, 8007708 <_fstat_r+0x1c>
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	bd38      	pop	{r3, r4, r5, pc}
 800770a:	bf00      	nop
 800770c:	200003fc 	.word	0x200003fc

08007710 <_isatty_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d06      	ldr	r5, [pc, #24]	@ (800772c <_isatty_r+0x1c>)
 8007714:	2300      	movs	r3, #0
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7f9 fa1f 	bl	8000b5e <_isatty>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_isatty_r+0x1a>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_isatty_r+0x1a>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	200003fc 	.word	0x200003fc

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
